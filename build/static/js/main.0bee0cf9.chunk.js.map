{"version":3,"sources":["constants.ts","APIService.ts","scenes/Login.tsx","components/stocks.png","components/Header.tsx","types.ts","Calculations.ts","scenes/Analysis.tsx","scenes/Overview.tsx","scenes/Positions.tsx","scenes/Trade.tsx","components/Buy.tsx","components/Sell.tsx","scenes/Transactions.tsx","scenes/NavPane.tsx","scenes/SignUp.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["AUTH_TOKEN_KEY","MD5","require","getURL","endpoint","params","url","queryString","URLSearchParams","toString","encryptPassword","clearText","hex","createRequestAuthorization","methodType","method","headers","authorization","sessionStorage","getItem","isLoggedIn","doSignup","email","password","name","a","encryptedPassword","requestOptions","body","JSON","stringify","fetch","response","status","json","console","log","doLogin","responseObj","setItem","token","getAccount","account","getUserInfo","userResponseObj","getAssets","assets","getTransactions","transactions","getCash","cash","lookupTicker","tickerSymbol","urlString","text","getHistoricalPrices","symbol","startDate","queryURLString","ticker","date","toDateString","buyAsset","shares","price","sharesString","priceString","cashRemainingAfterPurchase","successful","remainingCash","sellAsset","getStockPrice","getShareCount","asset","totalCount","lots","map","currLot","Login","useState","loggingIn","setLoggingIn","labelCol","span","wrapperCol","initialValues","remember","onFinish","values","username","then","success","info","AntMessage","window","location","assign","error","onFinishFailed","errorInfo","autoComplete","Item","label","rules","required","message","Password","offset","size","type","htmlType","onClick","Header","userInfo","setUserInfo","useEffect","style","padding","fontSize","width","height","backgroundColor","src","stockIcon","verticalAlign","color","font","textAlign","paddingTop","paddingLeft","TransactionType","getCostBasis","costBasis","lot","basis","getQuantity","quantity","getAssetValue","stock","bid","previousClose","getGain","user","getAccountValue","total","getPercentOfAccount","getGainLoss","formatCurrency","money","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","formatPercent","percent","formatDate","long","dateToFormat","Date","isValid","formatStr","getTransactionsOnDate","dateTransactions","setHours","transaction","transactionDate","getTime","push","adjustForSplits","buyOrSell","SPLIT","toUpperCase","to","from","getPortfolioSnapshots","tickerMap","Map","snapshots","endDate","now","setDate","getDate","BUY","get","adjustedShares","undefined","set","amount","DIVIDEND","SELL","GIFT","positions","forEach","priceMap","getPriceHistory","prices","getStockPriceOnDateLocal","history","startDiff","length","Math","abs","endDiff","i","data","getHistoricalValues","snapshot","snapshotDate","stockValues","position","stockValue","value","stocks","clear","calcSharePrice","commission","Chart","register","registerables","lineColors","Analysis","chartData","setChartData","historicalValues","createChartData","portfolioValues","labels","datasets","totalValues","cashValues","originalValues","thinnedValues","interval","dateIdx","floor","thinPortfolioValues","stockValueMap","portfolioValue","key","NaN","id","pointRadius","pointHoverRadius","borderColor","colorId","colorName","className","maxHeight","description","datasetIdKey","Overview","setAccount","loadingAccount","setLoadingUser","loadingUserInfo","setLoadingAccount","foundUserInfo","foundUser","labelAlign","created","getAccountValueString","getGainString","Positions","TradeType","setData","calcData","ask","currentValue","percentOfAccount","gain","gainPercent","columns","title","dataIndex","onCell","record","replace","parseFloat","dataSource","pagination","pageSize","Buy","typedSymbol","setTypedSymbol","sharesToBuy","setSharesToBuy","askPrice","setAskPrice","totalCost","setTotalCost","setShareCost","companyName","setCompanyName","setCash","currentTypedSymbol","useRef","loadingStock","setLoadingStock","loadingPrice","setLoadingPrice","userCash","current","foundCompanyName","foundPrice","catch","ex","shareOnlyCost","handlePurchase","alert","msg","confirm","buyAssetResponse","placeholder","onChange","e","target","typedValue","Number","parseInt","disabled","Sell","setAssets","loadingAssets","setLoadingAssets","setAsset","sharesToSell","setSharesToSell","setPrice","handleSale","foundAssets","foundAsset","find","currAsset","defaultValue","Option","Trade","tradeType","setTradeType","orientation","orientationMargin","Transactions","rows","createDescription","TabPane","Tabs","logoutButton","removeItem","NavPane","paddingRight","boxSizing","tabBarExtraContent","tabPosition","tab","SignUp","userID","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAAaA,EAAwB,iB,iBCY/BC,EAAM,IADGC,EAAQ,KACAD,KAoBjBE,EAAS,SAACC,GAA8D,IAA7CC,EAA4C,uDAAd,GAazDC,EAHO,GAGeF,EACpBG,EAAqB,IAAIC,gBAAgBH,GAAQI,WACvD,OAAOH,EAAM,IAAMC,GAGfG,EAAkB,SAACC,GACvB,OAAOV,EAAIW,IAAID,IAGXE,EAA6B,WAAsC,IAArCC,EAAoC,uDAAvB,MAC/C,MAAO,CACLC,OAAQD,EACRE,QAAS,CACPC,cAAc,UAAD,OAAYC,eAAeC,QAAQnB,OAKzCoB,EAAa,mBACtBF,eAAeC,QAAQnB,IAMdqB,EAAQ,uCAAG,WACtBC,EACAC,EACAC,GAHsB,uBAAAC,EAAA,6DAKhBC,EAA4BhB,EAAgBa,GAQ5CI,EAAiB,CACrBZ,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BY,KAAMC,KAAKC,UAAU,CACnBR,MAAOA,EACPC,SAAUG,EACVF,KAAMA,KAnBY,SAsBCO,IAAM5B,EAAO,eAAgBwB,GAtB9B,cAsBhBK,EAtBgB,OAwBhBC,EAAiBD,EAASC,OAxBV,SAyBKD,EAASE,OAzBd,UAyBhBA,EAzBgB,OA2BP,MAAXD,EA3BkB,2CA4Bb,GA5Ba,eA8BpBE,QAAQC,IAAI,kBAAoBP,KAAKC,UAAUI,IA9B3B,mBA+Bb,GA/Ba,4CAAH,0DAmCRG,EAAO,uCAAG,WACrBf,EACAC,GAFqB,qBAAAE,EAAA,6DAIfC,EAA4BhB,EAAgBa,GAE5CI,EAAiB,CACrBZ,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BY,KAAMC,KAAKC,UAAU,CAAER,QAAOC,SAASG,KATpB,SAWEK,IAAO5B,EAAO,cAAewB,GAX/B,OAWfK,EAXe,YAabA,EAASC,OAbI,OAcd,MAdc,OAsBd,MAtBc,MAuBd,MAvBc,yCAeSD,EAASE,OAflB,eAeXI,EAfW,OAgBjBpB,eAAeqB,QAAQvC,EAAgBsC,EAAYE,OACnDL,QAAQC,IAAI,qBAAuBE,GAjBlB,mBAoBV,GApBU,eAyBjBH,QAAQC,IAAI,+BAAiCd,GAzB5B,mBA0BV,GA1BU,eA8BjBa,QAAQC,IAAI,6BA9BK,mBA+BV,GA/BU,4CAAH,wDAmCPK,EAAU,uCAAG,gCAAAhB,EAAA,6DAClBE,EAAiBd,IADC,SAEDkB,IACrB5B,EAAO,mBACPwB,GAJsB,OAElBK,EAFkB,YAOhBA,EAASC,OAPO,OAQjB,MARiB,OAYjB,MAZiB,wCASWD,EAASE,OATpB,cASdQ,EATc,yBAUbA,GAVa,oBAcpBP,QAdoB,UAcFH,EAASE,OAdP,gCAcZE,IAdY,kCAeb,MAfa,eAmBpBD,QAAQC,IAAI,kCAnBQ,kBAoBb,MApBa,4CAAH,qDAwBVO,EAAW,uCAAG,gCAAAlB,EAAA,6DACnBE,EAAiBd,IADE,SAEFkB,IACrB5B,EAAO,oBACPwB,GAJuB,OAEnBK,EAFmB,YAOjBA,EAASC,OAPQ,OAQlB,MARkB,OAYlB,MAZkB,wCASSD,EAASE,OATlB,cASfU,EATe,yBAUdA,GAVc,oBAcrBT,QAdqB,UAcHH,EAASE,OAdN,gCAcbE,IAda,kCAed,MAfc,eAmBrBD,QAAQC,IAAI,+BAnBS,kBAoBd,MApBc,4CAAH,qDA+CXS,EAAS,uCAAG,gCAAApB,EAAA,6DACjBE,EAAiBd,IADA,SAGAkB,IACrB5B,EAAO,kBACPwB,GALqB,OAGjBK,EAHiB,YAQfA,EAASC,OARM,OAShB,MATgB,OAehB,MAfgB,wCAUWD,EAASE,OAVpB,cAUbU,EAVa,OAYnBT,QAAQC,IAAI,qBAAuBQ,EAAgBE,QAZhC,kBAaZF,EAAgBE,QAbJ,oBAiBnBX,QAjBmB,UAiBDH,EAASE,OAjBR,gCAiBXE,IAjBW,kCAkBZQ,GAlBY,eAsBnBT,QAAQC,IAAI,iCAtBO,kBAuBZQ,GAvBY,4CAAH,qDA2BTG,EAAe,uCAAG,gCAAAtB,EAAA,6DACvBE,EAAiBd,IADM,SAGNkB,IACrB5B,EAAO,wBACPwB,GAL2B,OAGvBK,EAHuB,YAQrBA,EAASC,OARY,OAStB,MATsB,OAetB,MAfsB,wCAUKD,EAASE,OAVd,cAUnBU,EAVmB,yBAalBA,EAAgBI,cAbE,oBAiBzBb,QAjByB,UAiBPH,EAASE,OAjBF,gCAiBjBE,IAjBiB,kCAkBlBQ,GAlBkB,eAsBzBT,QAAQC,IAAI,iCAtBa,kBAuBlBQ,GAvBkB,4CAAH,qDA2BfK,EAAO,uCAAG,gCAAAxB,EAAA,6DACfE,EAAiBd,IADF,SAGEkB,IACrB5B,EAAO,gBACPwB,GALmB,OAGfK,EAHe,YAQbA,EAASC,OARI,OASd,MATc,OAcd,MAdc,wCAUaD,EAASE,OAVtB,cAUXU,EAVW,yBAYVA,EAAgBM,MAZN,oBAgBjBf,QAhBiB,UAgBCH,EAASE,OAhBV,gCAgBTE,IAhBS,kCAiBVQ,GAjBU,eAqBjBT,QAAQC,IAAI,iCArBK,kBAsBVQ,GAtBU,4CAAH,qDA0BPO,EAAY,uCAAG,WAC1BC,GAD0B,qBAAA3B,EAAA,6DAG1BU,QAAQC,IAAI,sBAAwBgB,EAAe,WAG7CzB,EAAiBd,IAEjBwC,EAAmBlD,EAAO,oBAAqB,CACnDiD,aAAcA,IATU,SAYHrB,IAAMsB,EAAW1B,GAZd,OAYpBK,EAZoB,OAc1BG,QAAQC,IAAI,kBAAmBJ,EAASC,OAAQ,MAAOD,EAASE,MAdtC,KAgBlBF,EAASC,OAhBS,OAiBnB,MAjBmB,QAqBnB,MArBmB,0CAkBgBD,EAASsB,OAlBzB,eAkBhBV,EAlBgB,yBAmBfA,GAnBe,iCAwBf,MAxBe,eA4BtBT,QAAQC,IAAI,oCA5BU,kBA6Bf,MA7Be,4CAAH,sDAiFlB,SAAemB,EAAtB,oC,4CAAO,WACLC,EACAC,GAFK,qBAAAhC,EAAA,6DAICE,EAAiBd,IAEjB6C,EAAiBvD,EAAO,2BAA4B,CACxDwD,OAAQH,EACRI,KAAMH,EAAUI,iBAElB1B,QAAQC,IAAK,kCAAmCoB,EAAQ,aAAcE,GAVjE,SAYkB3B,IAAM2B,EAAgB/B,GAZxC,OAYCK,EAZD,YAaGA,EAASC,OAbZ,OAcE,MAdF,wCAeyBD,EAASE,OAflC,eAeKI,EAfL,yBAgBMA,GAhBN,eAqBDH,QAAQC,IAAI,gCArBX,kBAsBM,IAtBN,6C,sBA+BA,IAAM0B,EAAQ,uCAAG,WACtBN,EACAO,EACAC,GAHsB,2BAAAvC,EAAA,6DAMhBE,EAAiBd,IAEjBoD,EAAuBF,EAAOtD,WAC9ByD,EAAsBF,EAAMvD,WAC5B4C,EAAmBlD,EAAO,gBAAiB,CAC/CiD,aAAcI,EACdO,OAAQE,EACRD,MAAOE,IAba,SAiBCnC,IAAMsB,EAAW1B,GAjBlB,OAiBhBK,EAjBgB,YAmBdA,EAASC,OAnBK,OAoBf,MApBe,0CAqBYD,EAASE,OArBrB,eAqBZU,EArBY,OAsBZuB,EAAqCvB,EAAgBM,KAtBzC,kBAuBX,CAAEkB,YAAY,EAAMC,cAAeF,IAvBxB,eA4BlBhC,QAAQC,IAAI,gCA5BM,kBA6BX,CAAEgC,YAAY,EAAOC,cAAe,IA7BzB,4CAAH,0DAsCRC,EAAS,uCAAG,WACvBd,EACAO,EACAC,GAHuB,2BAAAvC,EAAA,6DAKjBE,EAAiBd,IAEjBoD,EAAuBF,EAAOtD,WAC9ByD,EAAsBF,EAAMvD,WAC5B4C,EAAYlD,EAAO,iBAAkB,CACzCiD,aAAcI,EACdO,OAAQE,EACRD,MAAOE,IAZc,SAeAnC,IAAMsB,EAAW1B,GAfjB,OAejBK,EAfiB,OAiBvBG,QAAQC,IAAI,aAAcJ,EAASC,QAjBZ,KAmBfD,EAASC,OAnBM,OAoBhB,MApBgB,0CAqBWD,EAASE,OArBpB,eAqBbU,EArBa,OAsBbuB,EAAqCvB,EAAgBM,KAtBxC,kBAuBZ,CAAEkB,YAAY,EAAMC,cAAeF,IAvBvB,eA4BnBhC,QAAQC,IAAI,iCA5BO,mBA6BZ,GA7BY,4CAAH,0DAiCTmC,EAAa,uCAAG,WAC3BnB,GAD2B,qBAAA3B,EAAA,6DAIrBE,EAAiBd,IAEjBwC,EAAmBlD,EAAO,qBAAsB,CACpDiD,aAAcA,IAPW,SASJrB,IAAMsB,EAAW1B,GATb,cASrBK,EATqB,gBAWGA,EAASE,OAXZ,OAWrBU,EAXqB,OAY3BT,QAAQC,IAAI,8BAA+BQ,GAZhB,KAcnBZ,EAASC,OAdU,OAepB,MAfoB,QAmBpB,MAnBoB,kDAiBhBW,GAjBgB,oBAqBvBT,QArBuB,UAqBLH,EAASE,OArBJ,gCAqBfE,IArBe,kCAsBhBQ,GAtBgB,eA0BvBT,QAAQC,IAAI,iCA1BW,kBA2BhBQ,GA3BgB,4CAAH,sDA+Bb4B,EAAgB,SAACC,GAE5B,IAAIC,EAAqB,EACzB,OAAKD,GAELA,EAAME,KAAKC,KAAI,SAACC,GACdH,GAAcG,EAAQd,UAGjBW,GANY,G,gBCpXNI,MA7Hf,WAAkB,IAAD,EACmBC,oBAAkB,GADrC,mBACRC,EADQ,KACGC,EADH,KAoCf,OACE,eAAC,IAAD,CACEzD,KAAK,QACL0D,SAAU,CACRC,KAAM,GAERC,WAAY,CACVD,KAAM,IAERE,cAAe,CACbC,UAAU,GAEZC,SAvCa,SAACC,GAChBP,GAAa,GACb5C,EAAQmD,EAAOC,SAAUD,EAAOjE,UAAUmE,MAAK,SAACC,GAC9CV,GAAa,GACRU,EAGHhD,IAAc+C,MAAK,SAACE,GAClBC,IAAWF,QACT,gBAAUC,QAAV,IAAUA,OAAV,EAAUA,EAAMpE,MAAO,0BACvB,GACAkE,MAAK,WACLI,OAAOC,SAASC,OAAO,WAP3BH,IAAWI,MAAM,2BAmCnBC,eArBmB,SAACC,GACtBhE,QAAQC,IAAI,UAAW+D,IAqBrBC,aAAa,MAbf,UAeE,cAAC,IAAKC,KAAN,CACEC,MAAM,YACN9E,KAAK,WACL+E,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,+BANf,SAUE,cAAC,IAAD,MAGF,cAAC,IAAKJ,KAAN,CACEC,MAAM,WACN9E,KAAK,WACL+E,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,gCANf,SAUE,cAAC,IAAMC,SAAP,MAGF,cAAC,IAAKL,KAAN,CACEjB,WAAY,CACVuB,OAAQ,EACRxB,KAAM,IAHV,SAMGH,GAAa5D,IACZ,cAAC,IAAD,CAAMwF,KAAK,UAEX,cAAC,IAAD,CAAQC,KAAK,UAAUC,SAAS,SAAhC,qBAMJ,eAAC,IAAKT,KAAN,CACEjB,WAAY,CACVuB,OAAQ,EACRxB,KAAM,IAHV,UAME,iDAEA,cAAC,IAAD,CAAQ0B,KAAK,OAAOE,QArET,WACfjB,OAAOC,SAASC,OAAO,YAoEnB,4BChHO,MAA0B,mCCM1B,SAASgB,IAAS,MAaCjC,mBAA0B,MAb3B,mBAaxBkC,EAbwB,KAadC,EAbc,KA0B/B,OAXAC,qBAAU,WACJ/F,MAAiB6F,GAEnBtE,IAAc+C,MAAK,SAACE,GACdA,GACFsB,EAAYtB,SAOlB,sBACEwB,MAAO,CACLC,QAAS,iBACTC,SAAU,OACVC,MAAO,OACPC,OAAQ,OACRC,gBAAiB,SANrB,UASE,qBAAKC,IAAKC,EAAWJ,MAAM,KAAKC,OAAO,KAAKJ,MAAO,CACjDQ,cAAc,YAEhB,wBACER,MAAO,CACLS,MAAO,QACPC,KAAM,QACNC,UAAW,SACXH,cAAe,SACfI,WAAY,OACZC,YAAa,QAPjB,UAUGhB,EACG,2BAA6BA,EAASzF,KACtC,wBAAyB,U,ICHzB0G,E,qDAAAA,K,YAAAA,E,UAAAA,E,YAAAA,E,oBAAAA,E,eAAAA,M,KAQL,IC5BMC,EAAe,SAAC1D,GAC3B,IADoD,EAChD2D,EAAoB,EAD4B,cAEpC3D,EAAME,MAF8B,IAEpD,2BAA4B,CAAC,IAApB0D,EAAmB,QAE1BD,GAAaC,EAAIC,MAAQD,EAAItE,QAJqB,8BAMpD,OAAOqE,GAGIG,EAAc,SAAC9D,GAC1B,IADmD,EAC/C+D,EAAmB,EAD4B,cAEnC/D,EAAME,MAF6B,IAEnD,2BAA4B,CAC1B6D,GAD0B,QACVzE,QAHiC,8BAKnD,OAAOyE,GAGIC,EAAgB,SAAChE,GAC5B,OACE8D,EAAY9D,IACXA,EAAMiE,MAAM1E,MAAM2E,KAAOlE,EAAMiE,MAAM1E,MAAM4E,eAAiB,IAIpDC,EAAU,SAACC,GACtB,OAAOC,EAAgBD,GDIW,KCDvBC,EAAkB,SAACD,GAC9B,IADwD,EACpDE,EAAgB,EADoC,cAEtCF,EAAKhG,QAFiC,IAExD,2BAA+B,CAAC,IAAvB2B,EAAsB,QAC7BuE,GAASP,EAAchE,IAH+B,8BAKxD,OAAOuE,EAAQF,EAAKlD,KAAK1C,MAGd+F,EAAsB,SAACH,EAAerE,GACjD,OAAOgE,EAAchE,GAASsE,EAAgBD,IAGnCI,GAAc,SAACzE,GAC1B,OAAOgE,EAAchE,GAAS0D,EAAa1D,IAOhC0E,GAAiB,SAACC,GAC7B,MACE,IACA,IAAIC,KAAKC,aAAa,QAAS,CAC7BC,sBAAuB,EACvBC,sBAAuB,IACtBC,OAAOL,IAUDM,GAAgB,SAACC,GAC5B,OACE,IAAIN,KAAKC,aAAa,QAAS,CAC7BC,sBAAuB,EACvBC,sBAAuB,IACtBC,OAAO,IAAME,GAAW,KAIlBC,GAAa,SAAChG,EAAYiG,GACrC,IAAIC,EAAqB,IAAIC,KAAKnG,GAClC,IAAKoG,YAAQF,GAAe,MAAO,GACnC,IAAMG,EAAYJ,EAAO,gBAAkB,aAE3C,OAAOJ,YAAOK,EAAcG,IAG9B,SAASC,GACPlH,EACAY,GAEA,IAAIuG,EAAkC,GACtCvG,EAAKwG,SAAS,EAAG,EAAG,EAAG,GAFR,oBAGSpH,GAHT,IAGf,2BAAsC,CAAC,IAA9BqH,EAA6B,QAChCC,EAAwB,IAAIP,KAAKM,EAAYzG,MAEjD,GADA0G,EAAgBF,SAAS,EAAG,EAAG,EAAG,GAC9BE,EAAkB1G,EAAM,MACxB0G,EAAgBC,YAAc3G,EAAK2G,WACrCJ,EAAiBK,KAAKH,IARX,8BAUf,OAAOF,EAGT,SAASM,GACPC,EACA1H,GAEA,IADQ,EACJe,EAAiB2G,EAAU3G,OADvB,cAEgBf,GAFhB,IAER,2BAAsC,CAAC,IAA9BqH,EAA6B,QAElCA,EAAYxD,OAASqB,EAAgByC,OACrCN,EAAY7G,OAAOoH,gBAAkBF,EAAUlH,OAAOoH,eAElDP,EAAYzG,KAAO8G,EAAU9G,OAC/BG,GAAmBsG,EAAYQ,GAAKR,EAAYS,OAR9C,8BAYR,OAAO/G,E,SAGMgH,G,iFAAf,WACE/H,GADF,2BAAAvB,EAAA,sDAWE,IARMuJ,EAAY,IAAIC,IAElBC,EAAiC,GACjChI,EAAe,EACbO,EAAkB,IAAIsG,KAAK/G,EAAa,GAAGY,OAC3CuH,EAAgB,IAAIpB,KAAKA,KAAKqB,QAC5BC,QAAQF,EAAQG,UAAY,GATtC,WAYQ1H,GAIJ,IAhBJ,EAgBUuG,EAAkCD,GACtClH,EACAY,GAlBN,cAqB4BuG,GArB5B,IAqBI,2BAA0C,CAAC,IAAlCE,EAAiC,QACxC,OAAQA,EAAYxD,MAClB,KAAKqB,EAAgBqD,IACnB,IAAIxH,EAA6BiH,EAAUQ,IAAInB,EAAY7G,QACrDiI,EAAiBhB,GAAgBJ,EAAarH,QACrC0I,IAAX3H,EAAsBA,GAAU0H,EAC/B1H,EAAS0H,EACdT,EAAUW,IAAItB,EAAY7G,OAAQO,GAClCb,GAAQmH,EAAYuB,OACpB,MAEF,KAAK1D,EAAgB2D,SACnB3I,GAAQmH,EAAYuB,OACpB,MAEF,KAAK1D,EAAgB4D,KACnB,IAAI/H,EAA6BiH,EAAUQ,IAAInB,EAAY7G,QACrDiI,EAAiBhB,GAAgBJ,EAAarH,QACrC0I,IAAX3H,EAAsBA,GAAU0H,GAElCtJ,QAAQC,IAAI,oDACZ2B,EAAS,GAEXiH,EAAUW,IAAItB,EAAY7G,OAAQO,GAClCb,GAAQmH,EAAYuB,OACpB,MAEF,KAAK1D,EAAgB6D,KACnB7I,GAAQmH,EAAYuB,SAjD9B,8BAwDI,IAAII,EAAwB,GAE5BhB,EAAUiB,SAAQ,SAAClI,EAAgBX,QAClBsI,IAAX3H,GAAwBA,EAAS,GACnCiI,EAAUxB,KAAK,CAAEzG,OAAQA,EAAQP,OAAQJ,OAI7C8H,EAAUV,KAAK,CAAEtH,KAAMA,EAAMU,KAAM,IAAImG,KAAKnG,GAAOoI,UAAWA,KApD1DpI,EAAaH,EACjBG,EAAOuH,EACPvH,EAAKyH,QAAQzH,EAAK0H,UAAY,GAC7B,EAHG1H,GAZR,yBAmESsH,GAnET,4C,sBAsEA,IAAMgB,GAA2C,IAAIjB,IAE/CkB,GAAe,uCAAG,WACtB3I,EACAC,GAFsB,eAAAhC,EAAA,2DAIlB2K,EAAwCF,GAASV,IAAIhI,IAJnC,yCAKH4I,GALG,uBAOP7I,EAAoBC,EAAQC,GAPrB,cAOtB2I,EAPsB,OAQtBF,GAASP,IAAInI,EAAQ4I,GARC,kBASfA,GATe,2CAAH,wDAYfC,GAAwB,uCAAG,WAC/B7I,EACAI,GAF+B,6BAAAnC,EAAA,sEAIU0K,GAAgB3I,EAAQI,GAJlC,UAIzB0I,EAJyB,OAOzBC,EACJD,EAAQE,OAAS,EACbC,KAAKC,IAAI,IAAI3C,KAAKuC,EAAQ,GAAG1I,MAAM2G,UAAY,IAAIR,KAAKnG,GAAM2G,gBAC9DmB,EACAiB,EACJL,EAAQE,OAAS,EACbC,KAAKC,IAAI,IAAI3C,KAAKuC,EAAQA,EAAQE,OAAS,GAAG5I,MAAM2G,UAAY,IAAIR,KAAKnG,GAAM2G,gBAC/EmB,IAGFa,GAAaI,GAAWJ,EAAYI,GAjBT,iBAmBpBC,EAAIN,EAAQE,OAAO,EAnBC,YAmBEI,GAAI,GAnBN,oBAoBrBC,EAAuBP,EAAQM,KACR,IAAI7C,KAAK8C,EAAKjJ,OACrBA,GAtBK,0CAwBlBiJ,EAAK7I,OAxBa,UAmBW4I,EAnBX,6DA8BZN,GA9BY,8DA8BpBO,EA9BoB,UA+BE,IAAI9C,KAAK8C,EAAKjJ,OACrBA,GAhCK,0CAkClBiJ,EAAK7I,OAlCa,wJAsC/B7B,QAAQC,IAAIoB,EAAQ,YAAaI,EAAM,KAAM,GAtCd,kBAuCxB,GAvCwB,iEAAH,wDA0DjBkJ,GAAmB,uCAAG,WACjC9J,GADiC,uCAAAvB,EAAA,6DAG3B+D,EAA2B,GAHA,SAKYuF,GAC3C/H,GAN+B,OAK3BkI,EAL2B,qBASZA,GATY,yDASxB6B,EATwB,QAU3B/D,EAAgB,EACdgE,EAAqB,IAAIjD,KAAKgD,EAASnJ,MAGvCqJ,EAA2B,GAdF,cAeVF,EAASf,WAfC,kEAetBkB,EAfsB,kBAgBDb,GAC1Ba,EAAS1J,OACTwJ,GAlB2B,QAgBvBhJ,EAhBuB,OAqBvBmJ,EAAwB,CAAC3J,OAAQ0J,EAAS1J,OAAQ4J,MAAMF,EAASnJ,OAASC,GAChFiJ,EAAYzC,KAAK2C,GACjBnE,GAASmE,EAAWC,MAvBS,iJA0B/BpE,GAAS+D,EAAS7J,KAGlBsC,EAAOgF,KAAK,CAAE5G,KAAMoJ,EAAc9J,KAAK6J,EAAS7J,KAAM8F,MAAMA,EAAOqE,OAAQJ,IA7B5C,sJAgCjCf,GAASoB,QAhCwB,kBAkC1B9H,GAlC0B,8EAAH,sDAqCnB+H,GAAiB,SAAClD,GAC7B,OAAIA,EAAYxD,OAASqB,EAAgBqD,KAC/BlB,EAAYuB,OAASvB,EAAYmD,YAAcnD,EAAYtG,QAGhEsG,EAAYuB,OAASvB,EAAYmD,YAAcnD,EAAYtG,Q,4BChUlE0J,KAAMC,SAAN,MAAAD,KAAK,YAAaE,OAElB,IAAMC,GAAsB,CAAC,YAAa,aAAc,iBAAkB,SAAU,QAAS,eAAgB,eAyJ9FC,OAzIf,WAAqB,IAAD,EACgB9I,wBAAgC2G,GADhD,mBACXoC,EADW,KACAC,EADA,KAGlB5G,qBAAU,WACRpE,IAAkB2C,MAAK,SAAC1C,GACtB8J,GAAoB9J,GAAc0C,MAAK,SAACsI,GACtC,IAAMF,EAAYG,EAAgBD,GAClCD,EAAaD,WAGhB,IAEH,IAsBMG,EAAkB,SAACC,GACvB,IAAMC,EAAmB,GACnBC,EAAkB,GAClBC,EAAwB,GACxBC,EAAuB,GAE7BJ,EA1B0B,SAACK,GAE3B,GAAIA,EAAe/B,OAJK,IAKtB,OAAO+B,EAMT,IAHA,IAAMC,EAAiC,GACjCC,EAAkBF,EAAe/B,OATf,IAWfI,EAAS,EAAGA,EAAI2B,EAAe/B,OAAQI,GAAK6B,EAAU,CAC7D,IAAMC,EAAUjC,KAAKkC,MAAM/B,GAC3B4B,EAAchE,KAAK+D,EAAeG,IAMpC,OAJIF,EAAcA,EAAchC,OAAO,IAAM+B,EAAeA,EAAe/B,OAAO,IAChFgC,EAAchE,KAAK+D,EAAeA,EAAe/B,OAAO,IAGnDgC,EASWI,CAAoBV,GAEtC,IARwE,EAQlEW,EAAuC,IAAI5D,IARuB,cAStDiD,GATsD,IASxE,2BAAmC,CAAC,IAAD,EAA1Bd,EAA0B,sBACVA,EAAMC,QADI,IACjC,2BAAqC,CAAC,IAA7BF,EAA4B,QACO0B,EAAcrD,IACtD2B,EAAW3J,SAGXqL,EAAclD,IAAIwB,EAAW3J,OAAQ,KANR,gCATqC,kDAoB7C0K,GApB6C,yBAoB/DY,EApB+D,QAqBtEX,EAAO3D,KAAKZ,GAAWkF,EAAelL,MAAM,IAC5CyK,EAAY7D,KAAKsE,EAAe9F,OAChCsF,EAAW9D,KAAKsE,EAAe5L,MAE/B2L,EAAc5C,SAAQ,SAACgB,EAAuB8B,GAC5C,IAD4D,EACxD5B,EAAqB6B,IADmC,cAE1CF,EAAezB,QAF2B,IAE5D,2BAAyC,CAAC,IAAjC3E,EAAgC,QACvC,GAAIA,EAAMlF,OAAOoH,gBAAkBmE,EAAInE,cAAe,CACpDuC,EAAazE,EAAM0E,MACnB,QALwD,8BAQ5DH,EAAYzC,KAAK2C,OAbrB,2BAA6C,IApB2B,8BAqCxEiB,EAAS5D,KAAK,CACZyE,GAAI,EACJ3I,MAAO,QACPuG,KAAMwB,EACNa,YAzFe,EA0FfC,iBAzFqB,EA0FrBC,YAAa,SAGfhB,EAAS5D,KAAK,CACZyE,GAAI,EACJ3I,MAAO,OACPuG,KAAMyB,EACNY,YAlGe,EAmGfC,iBAlGqB,EAmGrBC,YAAa,UAGf,IAAIH,EAAa,EAGbI,EAAiB,EAoBrB,OAnBAR,EAAc5C,SAAQ,SAACgB,EAAuB8B,GAC5C,IAAMO,EAAmB1B,GAAWyB,KAC9BA,GAAWzB,GAAWpB,SAC1B6C,EAAS,GACXjB,EAAS5D,KAAK,CACZyE,GAAIA,IACJ3I,MAAOyI,EAEPlC,KAAMI,EACNiC,YApHa,EAqHbC,iBApHmB,EAqHnBC,YAAaE,OAIY,CAC3BnB,SACAC,aAKJ,OACE,qBAAKmB,UAAU,WAAf,SACE,wBAAQA,UAAU,kBAAmBnI,MACnC,CACEoI,UAAW,QAFf,cAKiB9D,IAAdoC,EACC,8BACE,cAAC,IAAD,CAAMlH,KAAK,cAEXkH,EAAUK,OAAO3B,OAAS,EAC5B,cAAC,KAAD,CAAOiD,YAAY,kEAGnB,cAAC,KAAD,CAAMC,aAAa,IAAI7C,KAAMiB,S,SCvCxB6B,OA9Gf,WAAqB,IAAD,EACY5K,qBADZ,mBACXrC,EADW,KACFkN,EADE,OAEc7K,qBAFd,mBAEXkC,EAFW,KAEDC,EAFC,OAGuBnC,oBAAkB,GAHzC,mBAGX8K,EAHW,KAGKC,EAHL,OAI2B/K,oBAAkB,GAJ7C,mBAIXgL,EAJW,KAIMC,EAJN,KAsClB,OAhCA7I,qBAAU,WACR6I,GAAkB,GAClBrN,IAAc+C,MAAK,SAACuK,GAClBA,GAAiB/I,EAAY+I,GAC7BD,GAAkB,GAClBF,GAAe,GACfrN,IAAaiD,MAAK,SAACwK,GACjBA,GAAaN,EAAWM,GACxBJ,GAAe,WAGlB,IAsBD,qCACE,uBACA,eAAC,IAAD,2BAAMtO,KAAK,YAdQ,CACrB0D,SAAU,CACRC,KAAM,EACNwB,OAAQ,GAEVvB,WAAY,CACVD,KAAM,GACNwB,OAAQ,KAOR,cACE,cAAC,IAAKN,KAAN,CAAWC,MAAM,OAAO6J,WAAW,QAAnC,SACGJ,IAAoB9I,EACnB,cAAC,IAAD,CAAML,KAAK,UAEX,gCAAQK,EAASzF,SAIrB,cAAC,IAAK6E,KAAN,CAAWC,MAAM,UAAU6J,WAAW,QAAtC,SACE,sBAAMZ,UAAU,gBAAhB,SACGtI,IAAa8I,GAAmB9I,EAAS3F,MACxC2F,EAAS3F,MAET,cAAC,IAAD,CAAMsF,KAAK,cAKjB,cAAC,IAAKP,KAAN,CAAWC,MAAM,kBAAkB6J,WAAW,QAA9C,SACE,sBAAMZ,UAAU,gBAAhB,SACGtI,IAAa8I,EACZnG,GAAW3C,EAASmJ,SAAS,GAE7B,cAAC,IAAD,CAAMxJ,KAAK,cAKjB,cAAC,IAAKP,KAAN,CAAWC,MAAM,gBAAgB6J,WAAW,QAA5C,SACE,sBAAMZ,UAAU,gBAAhB,UACI7M,GAAWmN,EACX,cAAC,IAAD,CAAMjJ,KAAK,UAtDO,SAAClE,GAC7B,OAAOyG,GAAeJ,EAAgBrG,IAuD5B2N,CAAsB3N,OAK5B,cAAC,IAAK2D,KAAN,CAAWC,MAAM,eAAe6J,WAAW,QAA3C,SACE,sBAAMZ,UAAU,gBAAhB,SACGtI,IAAa8I,EACZ5G,GAAelC,EAAS/D,MAExB,cAAC,IAAD,CAAM0D,KAAK,cAKjB,cAAC,IAAKP,KAAN,CAAWC,MAAM,kBAAkB6J,WAAW,QAA9C,SACE,sBAAMZ,UAAU,gBAAhB,SACGM,IAAmBnN,EAClB,cAAC,IAAD,CAAMkE,KAAK,UAEX,uBACEQ,MACEyB,EAAQnG,GAAW,EAAI,CAAEmF,MAAO,OAAU,CAAEA,WAAO6D,GAFvD,SAxEU,SAAChJ,GACrB,OAAOyG,GAAeN,EAAQnG,IA4EjB4N,CAAc5N,iB,UC+BhB6N,IC1IVC,GD0IUD,GAjHf,WAAsB,IAAD,EACKxL,qBADL,mBACZ8H,EADY,KACN4D,EADM,KAGnBtJ,qBAAU,WACR1E,IAAaiD,MAAK,SAACwK,GACbA,GACFO,EAAQC,EAASR,SAGpB,IAEH,IAAMQ,EAAW,SAAC5H,GAChB,IADiD,EAC3C+D,EAAsB,GADqB,cAI/B/D,EAAKhG,QAJ0B,IAIjD,2BAA+B,CAAC,IAAvB2B,EAAsB,QAEhByE,GAAYzE,GACX0D,EAAa1D,GAC3BoI,EAAKrC,KAAK,CACRhJ,KAAMiD,EAAMiE,MAAMlH,KAClBgC,OAAQiB,EAAMiE,MAAMlF,OAIpBmF,IAAKQ,GACH1E,EAAMiE,MAAM1E,MAAM2E,KAAOlE,EAAMiE,MAAM1E,MAAM4E,eAE7C+H,IAAKxH,GACH1E,EAAMiE,MAAM1E,MAAM2M,KAAOlM,EAAMiE,MAAM1E,MAAM4E,eAE7CJ,SAAUD,EAAY9D,GAAOhE,WAC7B2H,UAAWe,GAAehB,EAAa1D,IACvCmM,aAAczH,GAAeV,EAAchE,IAC3CoM,iBAAkBnH,GAAcT,EAAoBH,EAAMrE,IAC1DqM,KAAM3H,GAAeD,GAAYzE,IACjCsM,YAAarH,GAAcR,GAAYzE,GAAS0D,EAAa1D,OAzBhB,8BAoCjD,OAPAoI,EAAKrC,KAAK,CACRhJ,KAAM,OACNoP,aAAczH,GAAeL,EAAKlD,KAAK1C,MACvCkF,UAAWe,GAAeL,EAAKlD,KAAK1C,MACpC2N,iBAAkBnH,GAAcZ,EAAKlD,KAAK1C,KAAO6F,EAAgBD,MAG5D+D,GAGHmE,EAAoB,CACxB,CAAEC,MAAO,SAAUC,UAAW,SAAUnC,IAAK,UAC7C,CAAEkC,MAAO,QAASC,UAAW,OAAQnC,IAAK,QAC1C,CAAEkC,MAAO,WAAYC,UAAW,WAAYnC,IAAK,YACjD,CAAEkC,MAAO,MAAOC,UAAW,MAAOnC,IAAK,OACvC,CAAEkC,MAAO,MAAOC,UAAW,MAAOnC,IAAK,OACvC,CACEkC,MAAO,gBACPC,UAAW,eACXnC,IAAK,gBAEP,CAAEkC,MAAO,aAAcC,UAAW,YAAanC,IAAK,aAEpD,CACEkC,MAAO,wBACPC,UAAW,mBACXnC,IAAK,oBAEP,CACEkC,MAAO,kBACPC,UAAW,OACXnC,IAAK,OACLoC,OAAQ,SAACC,GAAD,MAAkB,CACxBhK,MAAO,CACLS,OH0OgBvE,EG1OE8N,EAAON,MH2O5BxN,GACLA,EAAOA,EAAK+N,QAAQ,IAAK,IACDC,WAAWhO,IAFjB,GG3OuB,EAAK,MAAO,WH0O9B,IAACA,IGtOtB,CACE2N,MAAO,oBACPC,UAAW,cACXnC,IAAK,cACLoC,OAAQ,SAACC,GAAD,MAAkB,CACxBhK,MAAO,CACLS,OHuOmBvE,EGvOE8N,EAAOL,aHwO/BzN,GACLA,EAAOA,EAAK+N,QAAQ,IAAK,IACHC,WAAWhO,IAFf,GGxOiC,EAAK,MAAO,WHuOrC,IAACA,KG7N3B,OACE,qBAAKiM,UAAU,YAAf,SACE,wBAAQA,UAAU,kBAAlB,cACY7D,IAATmB,EACC,8BACE,cAAC,IAAD,CAAMjG,KAAK,cAGb,cAAC,KAAD,CACE2K,WAAY1E,EACZmE,QAASA,EACTQ,WAf2C,CACnDC,SAAU,Y,oBE1GC,SAASC,KAAO,IAAD,EACU3M,mBAAS,IADnB,mBACrB4M,EADqB,KACRC,EADQ,OAEU7M,mBAAiB,GAF3B,mBAErB8M,EAFqB,KAERC,EAFQ,OAGI/M,mBAAwB,GAH5B,mBAGrBgN,EAHqB,KAGXC,EAHW,OAIMjN,mBAAiB,GAJvB,mBAIrBkN,EAJqB,KAIVC,EAJU,OAKMnN,mBAAiB,GALvB,mBAKVoN,GALU,aAMUpN,mBAAwB,MANlC,mBAMrBqN,EANqB,KAMRC,EANQ,OAOJtN,mBAAiB,GAPb,mBAOrB7B,EAPqB,KAOfoP,EAPe,KAUtBC,EAAqBC,iBAAe,IAVd,EAWYzN,oBAAkB,GAX9B,mBAWrB0N,EAXqB,KAWPC,EAXO,OAYY3N,oBAAkB,GAZ9B,mBAYrB4N,EAZqB,KAYPC,EAZO,KAyB5BzL,qBAAU,WACRlE,IAAUyC,MAAK,SAACmN,GACdP,EAAQO,QAET,IAEH1L,qBAAU,WACRuL,GAAgB,GAChBH,EAAmBO,QAAUnB,EAC7BxO,EAAawO,GACVjM,MAAK,SAACqN,GACDpB,IAAgBY,EAAmBO,UACrCJ,GAAgB,GAChBL,EAAeU,GACXA,GACFH,GAAgB,GAChBrO,EAAcoN,GACXjM,MAAK,SAACsN,GACLJ,GAAgB,GAChBZ,EAAYgB,EAAWrC,QAExBsC,OAAM,SAACC,GACNN,GAAgB,OAGpBZ,EAAY,MAEdU,GAAgB,OAGnBO,OAAM,SAACC,GACNR,GAAgB,QAEnB,CAACf,IAEJxK,qBAAU,WACR,GAAmB,MAAfiL,GAAmC,MAAZL,EAAkB,CAC3C,IAAMoB,EAAwBtB,EAAcE,EAC5CI,EAAagB,GACbjB,EACEiB,EAAgB,EAAIA,ENlBM,GMkBuBA,QAGnDhB,EAAa,GACbD,EAAa,KAEd,CAACE,EAAaL,EAAUF,IAE3B,IAUMuB,EAAc,uCAAG,4BAAA3R,EAAA,2DACjByB,EAAO+O,GADU,uBAEnBnM,OAAOuN,MAAM,kDAFM,0BAKjBjB,GACIkB,EACJ,8BACAzB,EACA,cACAO,EACA,mBACAjJ,GAAe8I,GACf,IACoBnM,OAAOyN,QAAQD,IAEnCxP,EAAS6N,EAAaE,EAAaE,GAAY,GAAGrM,MAChD,SAAC8N,GAAwC,IAC/BpP,EAA8BoP,EAA9BpP,WAAYC,EAAkBmP,EAAlBnP,cAChBD,IACF0B,OAAOuN,MACL,4CACElK,GAAe9E,IAEnByB,OAAOC,SAASC,OAAO,qBAI3B,WACEF,OAAOuN,MACL,8DAMRvN,OAAOuN,MAAM,sBApCM,2CAAH,qDAwDpB,OACE,eAAC,IAAD,2BAAM7R,KAAK,OAlBU,CACrB0D,SAAU,CACRC,KAAM,EACNwB,OAAQ,GAEVvB,WAAY,CACVD,KAAM,EACNwB,OAAQ,KAWV,cACE,eAAC,IAAKN,KAAN,CAAWC,MAAM,QAAjB,UACE,cAAC,IAAD,CACE8G,MAAOuE,EACP8B,YAAY,4BACZC,SAnImB,SAACC,GAC1B/B,EAAe+B,EAAEC,OAAOxG,MAAMxC,kBAoI1B,qCACG6H,EACC,cAAC,IAAD,CAAM7L,KAAK,UAEX,uBACEQ,MACIuK,GAAiBS,EACf,CAAEvK,WAAO6D,GACT,CAAE7D,MAAO,OAJjB,SAOI8J,EAEES,GAEA,wBAHA,KAKL,UAIP,cAAC,IAAK/L,KAAN,CAAWC,MAAM,oBAAjB,SACGqM,GAAgBF,EACf,cAAC,IAAD,CAAM7L,KAAK,UAEX,gCAAQmL,EAAW5I,GAAe4I,GAAY,yCAIlD,cAAC,IAAK1L,KAAN,CAAWC,MAAM,gBAAjB,SACE,cAAC,IAAD,CACEmN,YAAa,gCACbC,SAjKkB,SAACC,GACzB,IAAME,EAAqBF,EAAEC,OAAOxG,MAC9BrJ,EAAiB+P,OAAOC,SAASF,GAC3B/B,EAAR/N,GACgB,IA8JdqJ,MAAuB,IAAhByE,OAAoBnG,EAAYmG,MAI3C,cAAC,IAAKxL,KAAN,CAAWC,MAAM,aAAjB,SACE,gCAAQ6C,GN1IkB,QM6I5B,cAAC,IAAK9C,KAAN,CAAWC,MAAM,aAAjB,SACGuL,EAAc,IAAMY,GAAgBE,GACnC,cAAC,IAAD,CAAM/L,KAAK,UAEX,uBACEQ,MAAO6K,EAAY/O,EAAO,CAAE2E,MAAO,OAAU,CAAEA,WAAO6D,GADxD,SAGGmG,EAAc,EACX1I,GAAe8I,GACf,+CAKV,cAAC,IAAK5L,KAAN,6BArEe,CACjBjB,WAAY,CACVuB,OAAQ,EACRxB,KAAM,MAkEN,aACE,cAAC,IAAD,CACE0B,KAAK,UACLE,QAASqM,EACTY,SACkB,IAAhBnC,GACAc,GACAF,IACCL,GACDH,EAAY/O,EARhB,2BC/MO,SAAS+Q,KAAQ,IAAD,EACDlP,wBAA8B2G,GAD7B,mBACtB5I,EADsB,KACdoR,EADc,OAEanP,oBAAkB,GAF/B,mBAEtBoP,EAFsB,KAEPC,EAFO,OAGHrP,wBAA4B2G,GAHzB,mBAGtBjH,EAHsB,KAGf4P,EAHe,OAIWtP,mBAAS,GAJpB,mBAItBuP,EAJsB,KAIRC,EAJQ,OAKHxP,mBAAoB,CAC5C4D,IAAK,EACLgI,IAAK,EACL/H,cAAe,IARY,mBAKtB5E,EALsB,KAKfwQ,EALe,OAWWzP,oBAAkB,GAX7B,mBAWtB4N,EAXsB,KAWRC,EAXQ,KAiCvB6B,EAAU,uCAAG,gCAAAhT,EAAA,2DACb6S,EAAe9P,EAAcC,IADhB,uBAEfqB,OAAOuN,MAAM,qCAFE,8BAMb5O,EANa,oBAOTwN,EAAoBjO,EAAM2E,IAAM2L,EPWV,GOVtBhB,EACJ,0BACAgB,EACA,cACA7P,EAAMiE,MAAMlH,KACZ,mBACA2H,GAAe8I,GACf,KACoBnM,OAAOyN,QAAQD,GAhBtB,kCAmBUhP,EACrBG,EAAMiE,MAAMlF,OACZ8Q,EACAtQ,EAAM2E,KAAO,GAtBF,SAmBP3G,EAnBO,SAyBX8D,OAAOuN,MACL,uCACElK,GAAenH,EAASqC,gBAE5ByB,OAAOC,SAASC,OAAO,MAEvBF,OAAOuN,MAAM,gBAAkBrR,GA/BpB,wBAiCRqR,MAAM,kBAjCE,4CAAH,qDAqChBlM,qBAAU,WACRiN,GAAiB,GACjBvR,IAAY6C,MAAK,SAACgP,GAChBR,EAAUQ,GACVN,GAAiB,GACbM,GAAeA,EAAYlI,OAAS,GAAG6H,EAASK,EAAY,SAEjE,IAEHvN,qBAAU,WACJ1C,IACFmO,GAAgB,GAChB2B,EAAgB,GAEhBhQ,EAAcE,EAAMiE,MAAMlF,QAAQkC,MAAK,SAACsN,GACtCwB,EAASxB,GACTJ,GAAgB,SAGnB,CAACnO,IAmBJ,OACE,mCACG0P,EACC,cAAC,IAAD,CAAMvN,KAAK,UACR9D,GAA2B,GAAjBA,EAAO0J,OAGpB,eAAC,IAAD,2BAAMhL,KAAK,QAxBM,CACrB0D,SAAU,CACRC,KAAM,EACNwB,OAAQ,GAEVvB,WAAY,CACVD,KAAM,EACNwB,OAAQ,KAiBN,cACE,cAAC,IAAKN,KAAN,CAAWC,MAAM,QAAjB,SACE,cAAC,KAAD,CACEoN,SAzGc,SAACtG,GACzB,GAAItK,GAAUsK,EAAO,CACnB,IAAMuH,EAAgC7R,EAAO8R,MAC3C,SAACC,GAAD,OACEA,EAAUnM,MAAMlF,OAAOoH,gBAAkBwC,EAAMxC,iBAE/C+J,IACFN,EAASM,GACTJ,EAAgB,MAkGVO,aAAchS,EAAO,GAAG4F,MAAMlF,OAC9B4J,MAAK,OAAE3I,QAAF,IAAEA,OAAF,EAAEA,EAAOiE,MAAMlF,OAHtB,SAKGV,EAAO8B,KAAI,SAACiQ,GACX,OACE,cAAC,KAAOE,OAAR,CAAe3H,MAAOyH,EAAUnM,MAAMlF,OAAtC,SACGqR,EAAUnM,MAAMlH,KACf,MACAqT,EAAUnM,MAAMlF,OAChB,aAOZ,cAAC,IAAK6C,KAAN,CAAWC,MAAM,oBAAjB,SACGqM,EACC,cAAC,IAAD,CAAM/L,KAAK,UAEX,sCAASuC,GAAenF,EAAM2E,UAIlC,cAAC,IAAKtC,KAAN,CAAWC,MAAM,iBAAjB,SACE,cAAC,IAAD,CACEmN,YACEhP,EAEID,EAAcC,GACd,cACAA,EAAMiE,MAAMlF,OACZ,qBACA,iCAENkQ,SAhIe,SAACC,GAC1B,IAAME,EAAqBF,EAAEC,OAAOxG,MAC9BrJ,EAAiB+P,OAAOC,SAASF,GAC3BU,EAARxQ,GACiB,IA6HXqJ,MAAuB,GAAhBkH,OAAoB5I,EAAY4I,EACvClN,MACEkN,EAAe9P,EAAcC,GACzB,CAAEoD,MAAO,OACT,CAAEA,WAAO6D,OAKnB,cAAC,IAAKrF,KAAN,CAAWC,MAAM,aAAjB,SACE,gCAAQ6C,GPlHc,QOqHxB,cAAC,IAAK9C,KAAN,CAAWC,MAAM,eAAjB,SACGqM,GAAgB2B,EAAe,EAC9B,cAAC,IAAD,CAAM1N,KAAK,UAEX,gCACG0N,EAAe9P,EAAcC,GAC1B,6BACAD,EAAcC,GACd,eAFA,OAGAA,QAHA,IAGAA,OAHA,EAGAA,EAAOiE,MAAMlF,QACG,GAAhB8Q,EACA,4CACAA,EAAe,EACfnL,GAAenF,EAAM2E,IAAM2L,EPlIb,IOmId,MAKV,cAAC,IAAKjO,KAAN,6BAtFW,CACjBjB,WAAY,CACVuB,OAAQ,EACRxB,KAAM,MAmFF,aACE,cAAC,IAAD,CACE0B,KAAK,UACLE,QAAS0N,EACTT,UACGvP,IACAT,GACDsQ,GAAgB,GAChBA,EAAe9P,EAAcC,GAPjC,2BA3EJ,cAAC,KAAD,CAAOgL,YAAY,0C,SFvHtBe,K,UAAAA,E,aAAAA,Q,KAyCUwE,OApCf,WAAkB,IAAD,EACmBjQ,mBAASyL,GAAUjF,KADtC,mBACR0J,EADQ,KACGC,EADH,KAiBf,OACE,qCACE,uBACA,cAAC,IAAD,2BAAM1T,KAAK,SAbQ,CACrB0D,SAAU,CACRC,KAAM,EACNwB,OAAQ,GAEVvB,WAAY,CACVD,KAAM,KAON,aACE,cAAC,IAAKkB,KAAN,CAAWC,MAAM,aAAa6J,WAAW,OAAzC,SACE,eAAC,KAAD,CAAQuD,SAnBQ,SAACtG,GACvB8H,EAAa9H,IAkB4B0H,aAActE,GAAUjF,IAA3D,UACE,cAAC,KAAOwJ,OAAR,CAAe3H,MAAOoD,GAAUjF,IAAhC,SAAsCiF,GAAUjF,MAChD,cAAC,KAAOwJ,OAAR,CAAe3H,MAAOoD,GAAU1E,KAAhC,SAAuC0E,GAAU1E,eAIvD,cAAC,KAAD,CAASqJ,YAAY,OAAOC,kBAAkB,IAA9C,SACCH,GAAazE,GAAUjF,IAAK,YAAc,eAE1C0J,GAAazE,GAAUjF,IAAM,cAACmG,GAAD,IAAU,cAACuC,GAAD,QG2E/BoB,OAvGf,WAAyB,IAAD,EACEtQ,qBADF,mBACf8H,EADe,KACT4D,EADS,KAGtBtJ,qBAAU,WACRpE,IAAkB2C,MAAK,SAAC1C,GACtByN,EAAQC,EAAS1N,SAElB,IAEH,IAAM0N,EAAW,SAAC1N,GAChB,IADkE,EAC5DsS,EAAyB,GADmC,cAE1CtS,GAF0C,IAElE,2BAAsC,CAAC,IAA9BqH,EAA6B,QACpCiL,EAAK9K,KAAK,CACR5G,KAAMgG,GAAWS,EAAYzG,MAAM,GACnC6L,YAAa8F,EAAkBlL,GAC/BuB,OAAQvB,EAAYuB,OAAQzC,GAAekB,EAAYuB,QAAUzC,GAAe,GAChFjG,KAAMiG,GAAekB,EAAYnH,SAP6B,8BAUlE,OAAOoS,GAGHC,EAAoB,SAAClL,GACzB,IAAIoF,EAAsB,GAE1B,OAAQpF,EAAYxD,MAClB,KAAKqB,EAAgBqD,IACnBkE,EACE,OACApF,EAAYtG,OACZ,OACAsG,EAAY7I,KACZ,KACA6I,EAAY7G,OACZ,QACA2F,GAAeoE,GAAelD,IAChC,MAEF,KAAKnC,EAAgB2D,SACnB4D,EACE,eACApF,EAAYtG,OACZ,cACAsG,EAAY7I,KACZ,KACA6I,EAAY7G,OACZ,IACF,MAEF,KAAK0E,EAAgB6D,KACnB0D,EAAc,kBACd,MACF,KAAKvH,EAAgB4D,KACnB2D,EACE,QACApF,EAAYtG,OACZ,OACAsG,EAAY7I,KACZ,KACA6I,EAAY7G,OACZ,QACA2F,GAAeoE,GAAelD,IAChC,MACF,KAAKnC,EAAgByC,MACnB8E,EAAcpF,EAAY7G,OAAS,IAAM6G,EAAYQ,GAAK,QAAUR,EAAYS,KAAO,eACvF,MACF,QACE3I,QAAQC,IAAI,6BAA+BiI,EAAYxD,MACvD4I,EAAc,0CAKlB,OAAOA,GAcT,OACE,sBAAKF,UAAU,eAAf,UACE,wBAAQA,UAAU,6BACR7D,IAATmB,EACC,cAAC,IAAD,CAAMjG,KAAO,YAEb,cAAC,KAAD,CACA2K,WAAY1E,EACZmE,QAnBoB,CACxB,CAAEC,MAAO,OAAQC,UAAW,OAAQnC,IAAK,QACzC,CAAEkC,MAAO,cAAeC,UAAW,cAAenC,IAAK,eACvD,CAAEkC,MAAO,SAAUC,UAAW,SAAUnC,IAAK,UAC7C,CAAEkC,MAAO,eAAgBC,UAAW,OAAQnC,IAAK,SAgB7CyC,WAb8C,CAClDC,SAAW,WCxFP+D,GAAYC,IAAZD,QAQFE,GACJ,cAAC,IAAD,CAAQ7O,KAAK,UAAUE,QAPJ,WACGjB,OAAOyN,QAAQ,oBbuDrCrS,eAAeyU,WAAW3V,GapD1B8F,OAAOC,SAASC,OAAO,YAGvB,oBAuCa4P,OA9Bf,WACE,OACE,eAAC,IAAD,CAAMxO,MAAO,CACbY,WAAY,MACZC,YAAa,OACb4N,aAAc,MACdC,UAAW,eACVC,mBAAoBL,GACvBM,YAAY,MACZnP,KAAK,OAPH,UASE,cAAC2O,GAAD,CAASS,IAAI,WAAb,SACE,cAAC,GAAD,KAD0B,KAG5B,cAACT,GAAD,CAASS,IAAI,YAAb,SACE,cAAC,GAAD,KAD2B,KAG7B,cAACT,GAAD,CAASS,IAAI,eAAb,SACE,cAAC,GAAD,KAD8B,KAGhC,cAACT,GAAD,CAASS,IAAI,WAAb,SACE,cAAC,GAAD,KAD0B,KAG5B,cAACT,GAAD,CAASS,IAAI,QAAb,SACE,cAAC,GAAD,KADuB,S,mBCoChBC,OAlFf,WA6BE,OACE,eAAC,IAAD,2BAAM1U,KAAK,UAZU,CACrB0D,SAAU,CACRC,KAAM,EACNwB,OAAQ,GAEVvB,WAAY,CACVD,KAAM,GACNwB,OAAQ,KAKV,IAAwCpB,SA7BV,SAACC,GAC/BnE,EAASmE,EAAO2Q,OAAQ3Q,EAAOjE,SAAUiE,EAAOhE,MAAMkE,MACpD,SAACC,GACKA,GACFG,OAAOC,SAASC,OAAO,UACvBF,OAAOuN,MACL,YACE7N,EAAOhE,KACP,6CAGJsE,OAAOuN,MAAM,8BAkBnB,UACE,cAAC,IAAKhN,KAAN,CACEC,MAAM,OACN9E,KAAK,OACL+E,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,2BANf,SAUE,cAAC,IAAD,CAAOgN,YAAY,iBAErB,cAAC,IAAKpN,KAAN,CACEC,MAAM,UACN9E,KAAK,SACL+E,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,8BANf,SAUE,cAAC,IAAD,CAAOgN,YAAY,wBAGrB,cAAC,IAAKpN,KAAN,CACEC,MAAM,WACN9E,KAAK,WACL+E,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,+BANf,SAUE,cAAC,IAAMC,SAAP,CAAgBN,aAAa,mBAE/B,cAAC,IAAKC,KAAN,CACEjB,WAAY,CACVuB,OAAQ,EACRxB,KAAM,GAHV,SAME,cAAC,IAAD,CAAQ0B,KAAK,UAAUC,SAAS,SAAhC,4B,UCrEO,SAASsP,KACtB,OACE,8BAEA,cAAC,KAAD,UACE,gCACA,cAAC,KAAD,UACA,2DAEE,cAACpP,EAAD,IACA,uBACA,eAAC,KAAD,WACE,cAAC,KAAD,CAAOqP,KAAK,UAAZ,SACE,cAAC,GAAD,MAEF,cAAC,KAAD,CAAOA,KAAK,SAAZ,SACIjV,IAGA,cAAC,GAAD,IAFA,cAAC,EAAD,MAMJ,cAAC,KAAD,CAAOiV,KAAK,IAAZ,SACIjV,IAGA,cAAC,GAAD,IAFA,cAAC,EAAD,gBClCd,IAYekV,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB9Q,MAAK,YAAkD,IAA/C+Q,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACZ,GAAD,MAEFa,SAASC,eAAe,SAM1BZ,O","file":"static/js/main.0bee0cf9.chunk.js","sourcesContent":["export const AUTH_TOKEN_KEY:string = \"AUTH_TOKEN_KEY\"\r\nexport default {\r\n    AUTH_TOKEN_KEY\r\n}","import { AUTH_TOKEN_KEY } from \"./constants\";\r\nimport {\r\n  Asset,\r\n  Dividend,\r\n  SpotPrice,\r\n  Transaction,\r\n  Account,\r\n  UserInfo,\r\n  HistoricalPrice,\r\n} from \"./types\";\r\nimport fetch, { RequestInit } from \"node-fetch\";\r\nconst Hashes = require(\"jshashes\");\r\nconst MD5 = new Hashes.MD5();\r\n\r\nconst isFrontendLocal = ():boolean => {\r\n  return false;\r\n}\r\n\r\nconst isBackendLocal = (): boolean => {\r\n   return false;\r\n}\r\n\r\nconst isBackendRemote = (): boolean => {\r\n  return !isBackendLocal()\r\n}\r\n\r\nconst isFrontendRemote = (): boolean => {\r\n  return !isFrontendLocal()\r\n}\r\nconst AWS_PREFIX:string = \"https://reshortt.me\"\r\nconst LOCAL_PREFIX:string = \"http://localhost:3005\"\r\n\r\nconst getURL = (endpoint:string, params:Record<string, string>={}):string => {\r\n\r\n  let prefix:string= \"\"\r\n  if (isBackendLocal() && isFrontendLocal()) {\r\n    prefix = LOCAL_PREFIX   \r\n  }\r\n  else if (isFrontendLocal() && isBackendRemote()){\r\n    prefix = AWS_PREFIX\r\n  }\r\n  else if (isFrontendRemote() && isBackendRemote()) {\r\n    prefix = \"\"\r\n  }\r\n  \r\n  let url:string = prefix + endpoint\r\n  const queryString:string = new URLSearchParams(params).toString()\r\n  return url + \"?\" + queryString;\r\n}\r\n\r\nconst encryptPassword = (clearText: string): string => {\r\n  return MD5.hex(clearText);\r\n};\r\n\r\nconst createRequestAuthorization = (methodType = \"GET\"): RequestInit => {\r\n  return {\r\n    method: methodType,\r\n    headers: {\r\n      authorization: `Bearer ${sessionStorage.getItem(AUTH_TOKEN_KEY)}`,\r\n    },\r\n  };\r\n};\r\n\r\nexport const isLoggedIn = (): boolean =>\r\n  !!sessionStorage.getItem(AUTH_TOKEN_KEY);\r\n\r\nexport const doLogout = () => {\r\n  sessionStorage.removeItem(AUTH_TOKEN_KEY);\r\n};\r\n\r\nexport const doSignup = async (\r\n  email: string,\r\n  password: string,\r\n  name: string\r\n): Promise<boolean> => {\r\n  const encryptedPassword: string = encryptPassword(password);\r\n  // console.log(\r\n  //   \"signing up with clear password = \",\r\n  //   password,\r\n  //   \", encrypted =\",\r\n  //   encryptedPassword\r\n  // );\r\n\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({\r\n      email: email,\r\n      password: encryptedPassword,\r\n      name: name,\r\n    }),\r\n  };\r\n  const response = await fetch(getURL(\"/API/signup\"), requestOptions);\r\n\r\n  const status: number = response.status;\r\n  const json: string = await response.json();\r\n\r\n  if (status === 200) {\r\n    return true;\r\n  } else {\r\n    console.log(\"Signup failed: \" + JSON.stringify(json));\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const doLogin = async (\r\n  email: string,\r\n  password: string\r\n): Promise<boolean> => {\r\n  const encryptedPassword: string = encryptPassword(password);\r\n\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ email, password:encryptedPassword }),\r\n  };\r\n  const response = await fetch (getURL(\"/API/login\"), requestOptions);\r\n\r\n  switch (response.status) {\r\n    case 200:\r\n      const responseObj = await response.json();\r\n      sessionStorage.setItem(AUTH_TOKEN_KEY, responseObj.token);\r\n      console.log(\"Successful login: \" + responseObj);\r\n      // TODO log someone in, make it available everywhere\r\n\r\n      return true;\r\n\r\n    case 401:\r\n    case 400:\r\n      // todo: better way to show error\r\n      console.log(\"unsuccessful login for user \" + email);\r\n      return false;\r\n\r\n    default:\r\n      // 500 is possible for critical server erropr\r\n      console.log(\"unexpected login response\");\r\n      return false;\r\n  }\r\n};\r\n\r\nexport const getAccount = async (): Promise<Account | null> => {\r\n  const requestOptions = createRequestAuthorization();\r\n  const response = await fetch(\r\n    getURL(\"/API/getAccount\"),\r\n    requestOptions\r\n  );\r\n\r\n  switch (response.status) {\r\n    case 200:\r\n      const account: Account = await response.json();\r\n      return account;\r\n\r\n    case 401:\r\n      // todo: better way to show error\r\n      console.log(await response.json());\r\n      return null;\r\n\r\n    default:\r\n      // 500 is possible for critical server erropr\r\n      console.log(\"unexpected getAccount response\");\r\n      return null;\r\n  }\r\n};\r\n\r\nexport const getUserInfo = async (): Promise<UserInfo | null> => {\r\n  const requestOptions = createRequestAuthorization();\r\n  const response = await fetch(\r\n    getURL(\"/API/getUserInfo\"),\r\n    requestOptions\r\n  );\r\n\r\n  switch (response.status) {\r\n    case 200:\r\n      const userResponseObj = await response.json();\r\n      return userResponseObj;\r\n\r\n    case 401:\r\n      // todo: better way to show error\r\n      console.log(await response.json());\r\n      return null;\r\n\r\n    default:\r\n      // 500 is possible for critical server erropr\r\n      console.log(\"unexpected getUser response\");\r\n      return null;\r\n  }\r\n};\r\n\r\nexport const getBalance = async (yesterday: boolean): Promise<number> => {\r\n  const requestOptions = createRequestAuthorization()\r\n\r\n  const urlString = getURL(\"/API/getBalance\", {yesterday: `${yesterday}`});\r\n  const response = await fetch(urlString, requestOptions);\r\n\r\n  switch (response.status) {\r\n    case 200:\r\n      const userResponseObj = await response.json();\r\n      return userResponseObj.balance;\r\n\r\n    case 401:\r\n      // todo: better way to show error\r\n      console.log(await response.json());\r\n      return userResponseObj;\r\n\r\n    default:\r\n      // 500 is possible for critical server erropr\r\n      console.log(\"unexpected getUser response\");\r\n      return userResponseObj;\r\n  }\r\n};\r\n\r\nexport const getAssets = async (): Promise<Asset[]> => {\r\n  const requestOptions = createRequestAuthorization();\r\n\r\n  const response = await fetch(\r\n    getURL(\"/API/getAssets\"),\r\n    requestOptions\r\n  );\r\n\r\n  switch (response.status) {\r\n    case 200:\r\n      const userResponseObj = await response.json();\r\n\r\n      console.log(\"Assets retrieved: \" + userResponseObj.assets);\r\n      return userResponseObj.assets;\r\n\r\n    case 401:\r\n      // todo: better way to show error\r\n      console.log(await response.json());\r\n      return userResponseObj;\r\n\r\n    default:\r\n      // 500 is possible for critical server erropr\r\n      console.log(\"unexpected getAssets response\");\r\n      return userResponseObj;\r\n  }\r\n};\r\n\r\nexport const getTransactions = async (): Promise<Transaction[]> => {\r\n  const requestOptions = createRequestAuthorization();\r\n\r\n  const response = await fetch(\r\n    getURL(\"/API/getTransactions\"),\r\n    requestOptions\r\n  );\r\n\r\n  switch (response.status) {\r\n    case 200:\r\n      const userResponseObj = await response.json();\r\n\r\n      //console.log(\"Transactions retrieved: \" + userResponseObj.transactions);\r\n      return userResponseObj.transactions;\r\n\r\n    case 401:\r\n      // todo: better way to show error\r\n      console.log(await response.json());\r\n      return userResponseObj;\r\n\r\n    default:\r\n      // 500 is possible for critical server erropr\r\n      console.log(\"unexpected getAssets response\");\r\n      return userResponseObj;\r\n  }\r\n};\r\n\r\nexport const getCash = async (): Promise<number> => {\r\n  const requestOptions = createRequestAuthorization();\r\n\r\n  const response = await fetch(\r\n    getURL(\"/API/getCash\"),\r\n    requestOptions\r\n  );\r\n\r\n  switch (response.status) {\r\n    case 200:\r\n      const userResponseObj = await response.json();\r\n\r\n      return userResponseObj.cash;\r\n\r\n    case 401:\r\n      // todo: better way to show error\r\n      console.log(await response.json());\r\n      return userResponseObj;\r\n\r\n    default:\r\n      // 500 is possible for critical server erropr\r\n      console.log(\"unexpected getAssets response\");\r\n      return userResponseObj;\r\n  }\r\n};\r\n//TODO: don't lookup empty or null string\r\nexport const lookupTicker = async (\r\n  tickerSymbol: string\r\n): Promise<string | null> => {\r\n  console.log(\"Looking up ticker: \" + tickerSymbol + \".......\");\r\n\r\n  // TODO: credentials not needed for stocklookup. ...remove\r\n  const requestOptions = createRequestAuthorization();\r\n\r\n  const urlString:string = getURL(\"/API/lookupTicker\", {\r\n    tickerSymbol: tickerSymbol,\r\n  });\r\n\r\n  const response = await fetch(urlString, requestOptions);\r\n\r\n  console.log(\"ticker lookup: \", response.status, \" - \", response.json);\r\n\r\n  switch (response.status) {\r\n    case 200:\r\n      const userResponseObj: string = await response.text();\r\n      return userResponseObj;\r\n\r\n    case 400:\r\n      // todo: better way to show error\r\n      //console.log(await response.json());\r\n      return null;\r\n\r\n    default:\r\n      // 500 is possible for critical server erropr\r\n      console.log(\"unexpected lookupTicker response\");\r\n      return null;\r\n  }\r\n};\r\n\r\nexport async function getHistoricalDividends(\r\n  symbol: string\r\n): Promise<Dividend[]> {\r\n  const requestOptions = createRequestAuthorization();\r\n\r\n\r\n  const queryURLString = getURL(\"/API/getHistoricalDividends\", { ticker: symbol } );\r\n  const response = await fetch(queryURLString, requestOptions);\r\n\r\n  switch (response.status) {\r\n    case 200: {\r\n      return await response.json();\r\n    }\r\n\r\n    default:\r\n      // 500 is possible for critical server erropr\r\n      console.log(\"unexpected getDividends response\");\r\n      return [];\r\n  }\r\n}\r\n\r\nexport async function getStockPriceOnDate(\r\n  symbol: string,\r\n  date: Date\r\n): Promise<number> {\r\n  const requestOptions = createRequestAuthorization();\r\n\r\n \r\n  const queryURLString = getURL(\"/API/getStockPriceOnDate\", {\r\n    ticker: symbol,\r\n    date: date.toDateString(),\r\n  });\r\n\r\n  const response = await fetch(queryURLString, requestOptions);\r\n  switch (response.status) {\r\n    case 200: {\r\n      const responseObj = await response.json();\r\n\r\n      return responseObj.price;\r\n    }\r\n\r\n    default:\r\n      // 500 is possible for critical server erropr\r\n      console.log(\"unexpected buyAsset response\");\r\n      return 0;\r\n  }\r\n}\r\n\r\nexport async function getHistoricalPrices(\r\n  symbol: string,\r\n  startDate: Date\r\n): Promise<HistoricalPrice[]> {\r\n  const requestOptions = createRequestAuthorization();\r\n\r\n  const queryURLString = getURL(\"/API/getHistoricalPrices\", {\r\n    ticker: symbol,\r\n    date: startDate.toDateString(),\r\n  })\r\n  console.log (\"Getting  historical prices for \", symbol, \" with URL=\", queryURLString)\r\n\r\n  const response = await fetch(queryURLString, requestOptions);\r\n  switch (response.status) {\r\n    case 200: {\r\n      const responseObj = await response.json();\r\n      return responseObj\r\n    }\r\n\r\n    default:\r\n      // 500 is possible for critical server erropr\r\n      console.log(\"unexpected buyAsset response\");\r\n      return [];\r\n  }\r\n}\r\n\r\nexport type BuyAssetResponse = {\r\n  successful: boolean;\r\n  remainingCash: number;\r\n};\r\n\r\nexport const buyAsset = async (\r\n  symbol: string,\r\n  shares: number,\r\n  price: number\r\n): Promise<BuyAssetResponse> => {\r\n  // TODO: credentials not needed for stocklookup.remove\r\n  const requestOptions = createRequestAuthorization();\r\n\r\n  const sharesString: string = shares.toString();\r\n  const priceString: string = price.toString();\r\n  const urlString:string = getURL(\"/API/buyAsset\", {\r\n    tickerSymbol: symbol,\r\n    shares: sharesString,\r\n    price: priceString,\r\n  });\r\n\r\n\r\n  const response = await fetch(urlString, requestOptions);\r\n\r\n  switch (response.status) {\r\n    case 200: {\r\n      const userResponseObj = await response.json();\r\n      const cashRemainingAfterPurchase: number = userResponseObj.cash;\r\n      return { successful: true, remainingCash: cashRemainingAfterPurchase };\r\n    }\r\n\r\n    default:\r\n      // 500 is possible for critical server erropr\r\n      console.log(\"unexpected buyAsset response\");\r\n      return { successful: false, remainingCash: 0 };\r\n  }\r\n};\r\n\r\nexport type SellAssetResponse = {\r\n  successful: boolean;\r\n  remainingCash?: number;\r\n};\r\n\r\nexport const sellAsset = async (\r\n  symbol: string,\r\n  shares: number,\r\n  price: number\r\n) => {\r\n  const requestOptions = createRequestAuthorization();\r\n\r\n  const sharesString: string = shares.toString();\r\n  const priceString: string = price.toString();\r\n  const urlString = getURL(\"/API/sellAsset\", {\r\n    tickerSymbol: symbol,\r\n    shares: sharesString,\r\n    price: priceString,\r\n  });\r\n\r\n  const response = await fetch(urlString, requestOptions);\r\n\r\n  console.log(\"response: \", response.status);\r\n\r\n  switch (response.status) {\r\n    case 200: {\r\n      const userResponseObj = await response.json();\r\n      const cashRemainingAfterPurchase: number = userResponseObj.cash;\r\n      return { successful: true, remainingCash: cashRemainingAfterPurchase };\r\n    }\r\n\r\n    default:\r\n      // 500 is possible for critical server erropr\r\n      console.log(\"unexpected getAssets response\");\r\n      return false;\r\n  }\r\n};\r\n\r\nexport const getStockPrice = async (\r\n  tickerSymbol: string\r\n): Promise<SpotPrice> => {\r\n  // TODO: credentials not needed for stocklookup.remove\r\n  const requestOptions = createRequestAuthorization();\r\n\r\n  const urlString:string = getURL(\"/API/getStockPrice\", {\r\n    tickerSymbol: tickerSymbol,\r\n  });\r\n  const response = await fetch(urlString, requestOptions);\r\n\r\n  const userResponseObj = await response.json();\r\n  console.log(\"Get Stock Price Response:: \", userResponseObj);\r\n\r\n  switch (response.status) {\r\n    case 200:\r\n      //const userResponseObj = await response.json();\r\n      return userResponseObj;\r\n\r\n    case 401:\r\n      // todo: better way to show error\r\n      console.log(await response.json());\r\n      return userResponseObj;\r\n\r\n    default:\r\n      // 500 is possible for critical server erropr\r\n      console.log(\"unexpected getAssets response\");\r\n      return userResponseObj;\r\n  }\r\n};\r\n\r\nexport const getShareCount = (asset: Asset | null | undefined): number => {\r\n\r\n  var totalCount: number = 0;\r\n  if (!asset) return 0;\r\n\r\n  asset.lots.map((currLot) => {\r\n    totalCount += currLot.shares;\r\n  });\r\n\r\n  return totalCount;\r\n};\r\n","import { Button, Form, Input, message as AntMessage, Spin } from \"antd\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  doLogin,\r\n  getTransactions,\r\n  getUserInfo,\r\n  isLoggedIn,\r\n} from \"../APIService\";\r\nimport \"antd/dist/antd.css\";\r\nimport { UserInfo } from \"../types\";\r\n\r\nfunction Login() {\r\n  const [loggingIn, setLoggingIn] = useState<boolean>(false);\r\n\r\n  // useEffect(() => {\r\n  //   getTransactions().then((transactions) => {\r\n  //     setData(calcData(transactions));\r\n  //   });\r\n  // }, []);\r\n\r\n  const onFinish = (values: any) => {\r\n    setLoggingIn(true);\r\n    doLogin(values.username, values.password).then((success: boolean) => {\r\n      setLoggingIn(false);\r\n      if (!success) {\r\n        AntMessage.error(\"Invalid credentials\");\r\n      } else {\r\n        getUserInfo().then((info: UserInfo | null) => {\r\n          AntMessage.success(\r\n            \"User \" + info?.name + \" successfully logged in\",\r\n            1\r\n          ).then(() => {\r\n            window.location.assign(\"/\");\r\n          });\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo: any) => {\r\n    console.log(\"Failed:\", errorInfo);\r\n  };\r\n\r\n  const onSignUp = () => {\r\n    window.location.assign(\"/signup\");\r\n  };\r\n\r\n  return (\r\n    <Form\r\n      name=\"basic\"\r\n      labelCol={{\r\n        span: 8,\r\n      }}\r\n      wrapperCol={{\r\n        span: 16,\r\n      }}\r\n      initialValues={{\r\n        remember: true,\r\n      }}\r\n      onFinish={onFinish}\r\n      onFinishFailed={onFinishFailed}\r\n      autoComplete=\"off\"\r\n    >\r\n      <Form.Item\r\n        label=\"User name\"\r\n        name=\"username\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: \"Please input your username\",\r\n          },\r\n        ]}\r\n      >\r\n        <Input />\r\n      </Form.Item>\r\n\r\n      <Form.Item\r\n        label=\"Password\"\r\n        name=\"password\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: \"Please input your password!\",\r\n          },\r\n        ]}\r\n      >\r\n        <Input.Password />\r\n      </Form.Item>\r\n\r\n      <Form.Item\r\n        wrapperCol={{\r\n          offset: 8,\r\n          span: 16,\r\n        }}\r\n      >\r\n        {loggingIn || isLoggedIn() ? (\r\n          <Spin size=\"small\" />\r\n        ) : (\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            Login\r\n          </Button>\r\n        )}\r\n      </Form.Item>\r\n\r\n      <Form.Item\r\n        wrapperCol={{\r\n          offset: 8,\r\n          span: 16,\r\n        }}\r\n      >\r\n        <label>No Account? </label>\r\n\r\n        <Button type=\"link\" onClick={onSignUp}>\r\n          Sign Up\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n\r\n  // return (\r\n  //   <div className=\"Login\">\r\n  //     <label> Email </label>\r\n  //     <input name=\"typedEmail\" onChange={handleUserInput} />\r\n  //     <br />\r\n  //     <label> Password </label>\r\n  //     <input name=\"typedPassword\" onChange={handleUserInput} />\r\n  //     <br />\r\n  //     <button onClick={handleLoginButtonClick}>Login</button>\r\n  //     <br />\r\n  //     <label>No account?</label>\r\n  //     <label> Sign Up </label>\r\n  //     <header className=\"Login-header\"></header>\r\n  //   </div>\r\n  // );\r\n}\r\n\r\nexport default Login;\r\n","export default __webpack_public_path__ + \"static/media/stocks.0f6444bc.png\";","import { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components/macro\";\r\nimport { getUserInfo, isLoggedIn } from \"../APIService\";\r\nimport { UserInfo } from \"../types\";\r\nimport stockIcon from \"./stocks.png\";\r\n\r\nexport default function Header() {\r\n  // const Container = styled.div`\r\n  //   padding-left: 10px;\r\n  //   padding-bottom: 60px;\r\n  //   font-size: 16px;\r\n  //   width: 100%;\r\n  //   height: 70px;\r\n  //   background-color: green;\r\n  //   flexdirection: row;\r\n  //   flexwrap: wrap;\r\n  //   flex: 1;\r\n  // `;\r\n\r\n  const [userInfo, setUserInfo] = useState<UserInfo | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (isLoggedIn() && !userInfo) {\r\n      //console.log(\"Getting User Info . Currently it is \", userInfo)\r\n      getUserInfo().then((info: UserInfo | null) => {\r\n        if (info) {\r\n          setUserInfo(info);\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        padding: \"20px 10px 50px\",\r\n        fontSize: \"16px\",\r\n        width: \"100%\",\r\n        height: \"60px\",\r\n        backgroundColor: \"green\",\r\n      }}\r\n    >\r\n      <img src={stockIcon} width=\"24\" height=\"24\" style={{\r\n        verticalAlign:\"middle\"\r\n      }} />\r\n      <label\r\n        style={{\r\n          color: \"white\",\r\n          font: \"Arial\",\r\n          textAlign: \"center\",\r\n          verticalAlign: \"bottom\",\r\n          paddingTop: \"80px\",\r\n          paddingLeft: \"10px\"\r\n        }}\r\n      >\r\n        {userInfo\r\n          ? \" Investment Simulator - \" + userInfo.name\r\n          : \" Investment Simulator\"}{\" \"}\r\n      </label>\r\n    </div>\r\n  );\r\n}\r\n","export type Asset = {\r\n  stock: Stock;\r\n  lots: Lot[];\r\n}\r\n\r\nexport type Stock = {\r\n  name: string;\r\n  symbol: string;\r\n  price: SpotPrice;\r\n}\r\n\r\nexport type SpotPrice = {\r\n  bid: number;\r\n  ask: number;\r\n  previousClose: number;\r\n};\r\nexport type HistoricalPrice = { date: Date; price: number };\r\n\r\nexport type HistoricalData = {prices:HistoricalPrice[], dividends:Dividend[], splits:Split[]}\r\n\r\nexport type Dividend = {\r\n    date: Date; amount: number\r\n}\r\n\r\nexport type Split = {\r\n  date:Date, from:number, to:number\r\n}\r\n\r\nexport type UserInfo = {\r\n  name: string;\r\n  email: string;\r\n  cash: number;\r\n  created: Date;\r\n}\r\nexport type Account = {\r\n  info:UserInfo;\r\n  transactions: Transaction[];\r\n  assets: Asset[];\r\n};\r\n\r\nexport type Lot = { shares: number; basis: number };\r\nexport type Transaction = {\r\n  date: Date;\r\n  type: TransactionType;\r\n  amount: number;\r\n  symbol: string;\r\n  shares: number;\r\n  name:string;\r\n  cash:number;\r\n  commission:number;\r\n  from:number,\r\n  to:number\r\n};\r\n\r\nexport enum TransactionType {\r\n  GIFT = \"GIFT\",\r\n  BUY=\"BUY\",\r\n  SELL=\"SELL\",\r\n  DIVIDEND=\"DIVIDEND\",\r\n  SPLIT=\"SPLIT\"\r\n}\r\n\r\nexport const COMMISSION: number = 15.0;\r\nexport const INITIAL_GIFT: number = 1000000;\r\n","import { format, isValid } from \"date-fns\";\r\nimport { getHistoricalPrices } from \"./APIService\";\r\nimport {\r\n  Asset,\r\n  INITIAL_GIFT,\r\n  Transaction,\r\n  TransactionType,\r\n  Account,\r\n  HistoricalPrice,\r\n} from \"./types\";\r\n\r\ntype Position = {\r\n  symbol: string;\r\n  shares: number;\r\n};\r\n\r\nexport type StockValue = {\r\n  symbol:string;\r\n  value:number;\r\n}\r\n\r\ntype PortfolioSnapshot = {\r\n  date: Date;\r\n  positions: Position[];\r\n  cash: number;\r\n};\r\n\r\nexport type PortfolioValue = {\r\n  date: Date;\r\n  stocks: StockValue[];\r\n  cash: number;\r\n  total: number;\r\n};\r\n\r\nexport const getCostBasis = (asset: Asset): number => {\r\n  var costBasis: number = 0;\r\n  for (var lot of asset.lots) {\r\n    //console.log(lot);\r\n    costBasis += lot.basis * lot.shares;\r\n  }\r\n  return costBasis;\r\n};\r\n\r\nexport const getQuantity = (asset: Asset): number => {\r\n  var quantity: number = 0;\r\n  for (var lot of asset.lots) {\r\n    quantity += lot.shares;\r\n  }\r\n  return quantity;\r\n};\r\n\r\nexport const getAssetValue = (asset: Asset): number => {\r\n  return (\r\n    getQuantity(asset) *\r\n    (asset.stock.price.bid || asset.stock.price.previousClose || 0)\r\n  );\r\n};\r\n\r\nexport const getGain = (user: Account): number => {\r\n  return getAccountValue(user) - INITIAL_GIFT;\r\n};\r\n\r\nexport const getAccountValue = (user: Account): number => {\r\n  var total: number = 0;\r\n  for (var asset of user.assets) {\r\n    total += getAssetValue(asset);\r\n  }\r\n  return total + user.info.cash;\r\n};\r\n\r\nexport const getPercentOfAccount = (user: Account, asset: Asset): number => {\r\n  return getAssetValue(asset) / getAccountValue(user);\r\n};\r\n\r\nexport const getGainLoss = (asset: Asset): number => {\r\n  return getAssetValue(asset) - getCostBasis(asset);\r\n};\r\n\r\nexport const getCash = (user: Account): number => {\r\n  return user.info.cash;\r\n};\r\n\r\nexport const formatCurrency = (money: number): string => {\r\n  return (\r\n    \"$\" +\r\n    new Intl.NumberFormat(\"en-us\", {\r\n      minimumFractionDigits: 2,\r\n      maximumFractionDigits: 2,\r\n    }).format(money)\r\n  );\r\n};\r\n\r\nexport const formateDate = (date: Date): string => {\r\n  return new Intl.DateTimeFormat(\"en-us\", {\r\n    dateStyle: \"full\",\r\n  }).format(date);\r\n};\r\n\r\nexport const formatPercent = (percent: number): string => {\r\n  return (\r\n    new Intl.NumberFormat(\"en-us\", {\r\n      minimumFractionDigits: 2,\r\n      maximumFractionDigits: 2,\r\n    }).format(100 * percent) + \"%\"\r\n  );\r\n};\r\n\r\nexport const formatDate = (date: Date, long: boolean): string => {\r\n  var dateToFormat: Date = new Date(date);\r\n  if (!isValid(dateToFormat)) return \"\";\r\n  const formatStr = long ? \"MMMM dd, yyyy\" : \"yyyy-MM-dd\";\r\n\r\n  return format(dateToFormat, formatStr);\r\n};\r\n\r\nfunction getTransactionsOnDate(\r\n  transactions: Transaction[],\r\n  date: Date\r\n): Transaction[] {\r\n  let dateTransactions: Transaction[] = [];\r\n  date.setHours(0, 0, 0, 0);\r\n  for (let transaction of transactions) {\r\n    let transactionDate: Date = new Date(transaction.date);\r\n    transactionDate.setHours(0, 0, 0, 0);\r\n    if (transactionDate > date) break;\r\n    if (transactionDate.getTime() === date.getTime())\r\n      dateTransactions.push(transaction);\r\n  }\r\n  return dateTransactions;\r\n}\r\n\r\nfunction adjustForSplits(\r\n  buyOrSell: Transaction,\r\n  transactions: Transaction[]\r\n): number {\r\n  let shares: number = buyOrSell.shares;\r\n  for (let transaction of transactions) {\r\n    if (\r\n      transaction.type === TransactionType.SPLIT &&\r\n      transaction.symbol.toUpperCase() === buyOrSell.symbol.toUpperCase()\r\n    ) {\r\n      if (transaction.date > buyOrSell.date) {\r\n        shares = shares * (transaction.to / transaction.from);\r\n      }\r\n    }\r\n  }\r\n  return shares;\r\n}\r\n\r\nasync function getPortfolioSnapshots(\r\n  transactions: Transaction[]\r\n): Promise<PortfolioSnapshot[]> {\r\n  const tickerMap = new Map<string, number>();\r\n\r\n  let snapshots: PortfolioSnapshot[] = [];\r\n  let cash: number = 0;\r\n  const startDate: Date = new Date(transactions[0].date);\r\n  const endDate: Date = new Date(Date.now());\r\n  endDate.setDate(endDate.getDate() - 1);\r\n\r\n  for (\r\n    let date: Date = startDate;\r\n    date < endDate;\r\n    date.setDate(date.getDate() + 1)\r\n  ) {\r\n    const dateTransactions: Transaction[] = getTransactionsOnDate(\r\n      transactions,\r\n      date\r\n    );\r\n\r\n    for (let transaction of dateTransactions) {\r\n      switch (transaction.type) {\r\n        case TransactionType.BUY: {\r\n          let shares: number | undefined = tickerMap.get(transaction.symbol);\r\n          const adjustedShares = adjustForSplits(transaction, transactions);\r\n          if (shares !== undefined) shares += adjustedShares;\r\n          else shares = adjustedShares;\r\n          tickerMap.set(transaction.symbol, shares);\r\n          cash -= transaction.amount;\r\n          break;\r\n        }\r\n        case TransactionType.DIVIDEND: {\r\n          cash += transaction.amount;\r\n          break;\r\n        }\r\n        case TransactionType.SELL: {\r\n          let shares: number | undefined = tickerMap.get(transaction.symbol);\r\n          const adjustedShares = adjustForSplits(transaction, transactions);\r\n          if (shares !== undefined) shares -= adjustedShares;\r\n          else {\r\n            console.log(\"******** Error - sold shares that were not owned\");\r\n            shares = 0;\r\n          }\r\n          tickerMap.set(transaction.symbol, shares);\r\n          cash += transaction.amount;\r\n          break;\r\n        }\r\n        case TransactionType.GIFT: {\r\n          cash += transaction.amount;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    //console.log(\"ticker map is \", tickerMap);\r\n    let positions: Position[] = [];\r\n\r\n    tickerMap.forEach((shares: number, tickerSymbol: string) => {\r\n      if (shares !== undefined && shares > 0) {\r\n        positions.push({ shares: shares, symbol: tickerSymbol });\r\n      }\r\n    });\r\n\r\n    snapshots.push({ cash: cash, date: new Date(date), positions: positions });\r\n  }\r\n\r\n  return snapshots;\r\n}\r\n\r\nconst priceMap: Map<string, HistoricalPrice[]> = new Map();\r\n\r\nconst getPriceHistory = async (\r\n  symbol: string,\r\n  startDate: Date\r\n): Promise<HistoricalPrice[]> => {\r\n  let prices: HistoricalPrice[] | undefined = priceMap.get(symbol);\r\n  if (prices) return prices;\r\n\r\n  prices = await getHistoricalPrices(symbol, startDate);\r\n  priceMap.set(symbol, prices);\r\n  return prices;\r\n};\r\n\r\nconst getStockPriceOnDateLocal = async (\r\n  symbol: string,\r\n  date: Date\r\n): Promise<number> => {\r\n  const history: HistoricalPrice[] = await getPriceHistory(symbol, date);\r\n\r\n  // start from the beginning?\r\n  const startDiff: number | undefined =\r\n    history.length > 2\r\n      ? Math.abs(new Date(history[0].date).getTime() - new Date(date).getTime())\r\n      : undefined;\r\n  const endDiff: number | undefined =\r\n    history.length > 2\r\n      ? Math.abs(new Date(history[history.length - 1].date).getTime() - new Date(date).getTime())\r\n      : undefined;\r\n\r\n  // closer to the end\r\n  if (startDiff && endDiff && startDiff > endDiff) {\r\n\r\n    for (let i = history.length-1; i >=0; --i) {\r\n      const data:HistoricalPrice = history[i] \r\n      const historicalDate: Date = new Date(data.date);\r\n      if (historicalDate <= date) {\r\n        //console.log(symbol, \"(Reverse) price of \", symbol, \" on \", date, \": \", data.price)\r\n        return data.price;\r\n      }\r\n    }\r\n  }\r\n  // start from the beginning\r\n  else {\r\n    for (let data of history) {\r\n      const historicalDate: Date = new Date(data.date);\r\n      if (historicalDate >= date) {\r\n        //console.log(symbol, \"(Forward) price of \", symbol, \" on \", date, \": \", data.price)\r\n        return data.price;\r\n      }\r\n    }\r\n  }\r\n  console.log(symbol, \"price on \", date, \": \", 0);\r\n  return 0;\r\n};\r\n\r\n\r\n// type StockValue = {\r\n//   symbol:string;\r\n//   value:number;\r\n// }\r\n\r\n// type PortfolioSnapshot = {\r\n//   date: Date;\r\n//   positions: Position[];\r\n//   cash: number;\r\n// };\r\n\r\n// export type PortfolioValue = {\r\n//   date: Date;\r\n//   values: StockValue[];\r\n// };\r\nexport const getHistoricalValues = async (\r\n  transactions: Transaction[]\r\n): Promise<PortfolioValue[]> => {\r\n  const values: PortfolioValue[] = [];\r\n\r\n  const snapshots: PortfolioSnapshot[] = await getPortfolioSnapshots(\r\n    transactions\r\n  );\r\n\r\n  for (let snapshot of snapshots) {\r\n    let total: number = 0;\r\n    const snapshotDate: Date = new Date(snapshot.date);\r\n    //var debugMsg:string = \"Date: \" + snapshotDate + \": \"\r\n\r\n    const stockValues:StockValue[] = []\r\n    for (let position of snapshot.positions) {\r\n      const price: number = await getStockPriceOnDateLocal(\r\n        position.symbol,\r\n        snapshotDate\r\n      );\r\n      //debugMsg += (\"-- \" + position.shares + \" of \" + position.symbol + \" at \" + price)\r\n      const stockValue:StockValue = {symbol: position.symbol, value:position.shares * price}\r\n      stockValues.push(stockValue)\r\n      total += stockValue.value;\r\n    }\r\n    //debugMsg += (\"-- cash: \" + snapshot.cash)\r\n    total += snapshot.cash;\r\n\r\n    //console.log(debugMsg)\r\n    values.push({ date: snapshotDate, cash:snapshot.cash, total:total, stocks: stockValues });\r\n  }\r\n\r\n  priceMap.clear();\r\n\r\n  return values;\r\n};\r\n\r\nexport const calcSharePrice = (transaction: Transaction): number => {\r\n  if (transaction.type === TransactionType.BUY) {\r\n    return (transaction.amount - transaction.commission) / transaction.shares;\r\n  } else {\r\n    const perShare: number =\r\n      (transaction.amount + transaction.commission) / transaction.shares;\r\n    return perShare;\r\n  }\r\n};\r\n\r\nexport const parseCash = (text:string):number => {\r\n  if (!text) return 0\r\n  text = text.replace(\"$\", '')\r\n  const floatVal:number = parseFloat(text)\r\n  return floatVal\r\n\r\n} \r\nexport const parsePercent = (text:string):number => {\r\n  if (!text) return 0\r\n  text = text.replace(\"%\", '')\r\n  const intVal:number = parseFloat(text)\r\n  return intVal\r\n} ","import { useEffect, useState } from \"react\";\r\nimport { getStockPriceOnDate, getTransactions } from \"../APIService\";\r\nimport {\r\n  formatDate,\r\n  getHistoricalValues,\r\n  PortfolioValue,\r\n  StockValue,\r\n} from \"../Calculations\";\r\n//import { Line, LineConfig } from \"@ant-design/plots\";\r\nimport { Empty, Spin } from \"antd\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { Chart, registerables } from \"chart.js\";\r\n\r\nChart.register(...registerables);\r\n\r\nconst lineColors:string[] = [\"cadetblue\", \"darkorchid\", \"cornflowerblue\", \"indigo\", \"olive\", \"darkseagreen\", \"darkmagenta\"]\r\n\r\nconst POINT_RADIUS = 3.0\r\nconst POINT_HOVER_RADIUS = 6.0\r\n\r\ntype LineData = {\r\n  id: number;\r\n  label: string;\r\n  data: number[];\r\n  pointRadius: string;\r\n  pointHoverRadius:number,\r\n  backgroundColor: string;\r\n};\r\n\r\ntype ChartData = { labels: string[]; datasets: LineData[] };\r\n\r\nfunction Analysis() {\r\n  const [chartData, setChartData] = useState<ChartData | undefined>(undefined);\r\n\r\n  useEffect(() => {\r\n    getTransactions().then((transactions) => {\r\n      getHistoricalValues(transactions).then((historicalValues) => {\r\n        const chartData = createChartData(historicalValues);\r\n        setChartData(chartData);\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  const MAX_POINTS:number = 100\r\n\r\n  const thinPortfolioValues = (originalValues:PortfolioValue[]):PortfolioValue[] => {\r\n\r\n    if (originalValues.length < MAX_POINTS) {\r\n      return originalValues\r\n    }\r\n\r\n    const thinnedValues:PortfolioValue[] = []\r\n    const interval:number = originalValues.length/MAX_POINTS\r\n\r\n    for (let i:number=0; i < originalValues.length; i += interval) {\r\n      const dateIdx = Math.floor(i)\r\n      thinnedValues.push(originalValues[dateIdx])\r\n    }\r\n    if (thinnedValues[thinnedValues.length-1] != originalValues[originalValues.length-1]) {\r\n      thinnedValues.push(originalValues[originalValues.length-1])\r\n    }\r\n\r\n    return thinnedValues\r\n  }\r\n\r\n  const createChartData = (portfolioValues: PortfolioValue[]): ChartData => {\r\n    const labels: string[] = [];\r\n    const datasets: any[] = [];\r\n    const totalValues: number[] = [];\r\n    const cashValues: number[] = [];\r\n\r\n    portfolioValues = thinPortfolioValues(portfolioValues)\r\n\r\n    const stockValueMap: Map<string, number[]> = new Map();\r\n    for (let value of portfolioValues) {\r\n      for (let stockValue of value.stocks) {\r\n        const stockValues: number[] | undefined = stockValueMap.get(\r\n          stockValue.symbol\r\n        );\r\n        if (!stockValues) {\r\n          stockValueMap.set(stockValue.symbol, []);\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let portfolioValue of portfolioValues) {\r\n      labels.push(formatDate(portfolioValue.date, false));\r\n      totalValues.push(portfolioValue.total);\r\n      cashValues.push(portfolioValue.cash);\r\n\r\n      stockValueMap.forEach((stockValues: number[], key: string) => {\r\n        let stockValue: number = NaN;\r\n        for (let stock of portfolioValue.stocks) {\r\n          if (stock.symbol.toUpperCase() === key.toUpperCase()) {\r\n            stockValue = stock.value;\r\n            break;\r\n          }\r\n        }\r\n        stockValues.push(stockValue);\r\n      });\r\n    }\r\n\r\n    datasets.push({\r\n      id: 1,\r\n      label: \"Total\",\r\n      data: totalValues,\r\n      pointRadius: POINT_RADIUS,\r\n      pointHoverRadius:POINT_HOVER_RADIUS,\r\n      borderColor: \"blue\"\r\n    });\r\n\r\n    datasets.push({\r\n      id: 2,\r\n      label: \"Cash\",\r\n      data: cashValues,\r\n      pointRadius: POINT_RADIUS,\r\n      pointHoverRadius:POINT_HOVER_RADIUS,\r\n      borderColor: \"green\",\r\n    });\r\n\r\n    let id: number = 3;\r\n\r\n\r\n    let colorId:number = 0;\r\n    stockValueMap.forEach((stockValues: number[], key: string) => {\r\n      const colorName:string = lineColors[colorId] \r\n      if (++colorId == lineColors.length)\r\n        colorId =0;\r\n      datasets.push({\r\n        id: id++,\r\n        label: key,\r\n        //@ts-ignore\r\n        data: stockValues,\r\n        pointRadius: POINT_RADIUS,\r\n        pointHoverRadius: POINT_HOVER_RADIUS,\r\n        borderColor: colorName,\r\n      });\r\n    });\r\n\r\n    const chartData: ChartData = {\r\n      labels,\r\n      datasets,\r\n    };\r\n    return chartData;\r\n  };\r\n\r\n  return (\r\n    <div className=\"Analysis\">\r\n      <header className=\"Analysis-header\"  style = {\r\n        {\r\n          maxHeight: \"80vh\",\r\n        }\r\n      }>\r\n        {chartData === undefined ? (\r\n          <div>\r\n            <Spin size=\"default\" />\r\n          </div>\r\n        ) : chartData.labels.length < 7 ? (\r\n          <Empty description=\"History unavailable for accounts created within the last week\"></Empty>\r\n        ) : (\r\n          //@ts-ignore\r\n          <Line datasetIdKey=\"1\" data={chartData} />\r\n        )}\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Analysis;\r\n","import { Form, Spin } from \"antd\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getAccount, getUserInfo } from \"../APIService\";\r\nimport {\r\n  formatCurrency,\r\n  formatDate,\r\n  getAccountValue,\r\n  getGain,\r\n} from \"../Calculations\";\r\nimport { Account, UserInfo } from \"../types\";\r\nimport \"antd/dist/antd.css\";\r\n\r\nfunction Overview() {\r\n  const [account, setAccount] = useState<Account>();\r\n  const [userInfo, setUserInfo] = useState<UserInfo>();\r\n  const [loadingAccount, setLoadingUser] = useState<boolean>(false);\r\n  const [loadingUserInfo, setLoadingAccount] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    setLoadingAccount(true);\r\n    getUserInfo().then((foundUserInfo) => {\r\n      foundUserInfo && setUserInfo(foundUserInfo);\r\n      setLoadingAccount(false);\r\n      setLoadingUser(true);\r\n      getAccount().then((foundUser) => {\r\n        foundUser && setAccount(foundUser);\r\n        setLoadingUser(false);\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  const getAccountValueString = (account: Account): string => {\r\n    return formatCurrency(getAccountValue(account));\r\n  };\r\n\r\n  const getGainString = (account: Account): string => {\r\n    return formatCurrency(getGain(account));\r\n  };\r\n\r\n  const formItemLayout = {\r\n    labelCol: {\r\n      span: 2,\r\n      offset: 0,\r\n    },\r\n    wrapperCol: {\r\n      span: 36,\r\n      offset: 1,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <br />\r\n      <Form name=\"overview\" {...formItemLayout}>\r\n        <Form.Item label=\"Name\" labelAlign=\"right\">\r\n          {loadingUserInfo || !userInfo ? (\r\n            <Spin size=\"small\" />\r\n          ) : (\r\n            <label>{userInfo.name}</label>\r\n          )}\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"User ID\" labelAlign=\"right\">\r\n          <span className=\"ant-form-text\">\r\n            {userInfo && !loadingUserInfo && userInfo.email ? (\r\n              userInfo.email\r\n            ) : (\r\n              <Spin size=\"small\" />\r\n            )}\r\n          </span>\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Account Created\" labelAlign=\"right\">\r\n          <span className=\"ant-form-text\">\r\n            {userInfo && !loadingUserInfo ? (\r\n              formatDate(userInfo.created, true)\r\n            ) : (\r\n              <Spin size=\"small\" />\r\n            )}\r\n          </span>\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Account Value\" labelAlign=\"right\">\r\n          <span className=\"ant-form-text\">\r\n            {!account || loadingAccount ? (\r\n              <Spin size=\"small\" />\r\n            ) : (\r\n              getAccountValueString(account)\r\n            )}\r\n          </span>\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Cash Balance\" labelAlign=\"right\">\r\n          <span className=\"ant-form-text\">\r\n            {userInfo && !loadingUserInfo ? (\r\n              formatCurrency(userInfo.cash)\r\n            ) : (\r\n              <Spin size=\"small\" />\r\n            )}\r\n          </span>\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Total Gain/Loss\" labelAlign=\"right\">\r\n          <span className=\"ant-form-text\">\r\n            {loadingAccount || !account ? (\r\n              <Spin size=\"small\" />\r\n            ) : (\r\n              <label\r\n                style={\r\n                  getGain(account) < 0 ? { color: \"red\" } : { color: undefined }\r\n                }\r\n              >\r\n                {getGainString(account)}\r\n              </label>\r\n            )}\r\n          </span>\r\n        </Form.Item>\r\n      </Form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Overview;\r\n","import { useEffect, useState } from \"react\";\r\nimport { getAccount } from \"../APIService\";\r\nimport { Account } from \"../types\";\r\nimport { Spin, Table, TablePaginationConfig } from \"antd\";\r\nimport {\r\n  formatCurrency,\r\n  formatPercent,\r\n  getAccountValue,\r\n  getAssetValue,\r\n  getCostBasis,\r\n  getGainLoss,\r\n  getPercentOfAccount,\r\n  getQuantity,\r\n  parseCash,\r\n  parsePercent,\r\n} from \"../Calculations\";\r\n\r\ntype PositionRow = {\r\n  name: string;\r\n  symbol: string;\r\n  bid: string;\r\n  ask: string;\r\n  quantity: string;\r\n  costBasis: string;\r\n  currentValue: string;\r\n  percentOfAccount: string;\r\n  gain: string;\r\n  gainPercent: string;\r\n};\r\n\r\nfunction Positions() {\r\n  const [data, setData] = useState<PositionRow[] | undefined>();\r\n\r\n  useEffect(() => {\r\n    getAccount().then((foundUser) => {\r\n      if (foundUser) {\r\n        setData(calcData(foundUser));\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  const calcData = (user: Account): PositionRow[] => {\r\n    const data: PositionRow[] = [];\r\n    var totalBasis: number = 0;\r\n    var totalGain: number = 0;\r\n    for (var asset of user.assets) {\r\n      //console.log(\"pushing asset = \", JSON.stringify(asset))\r\n      totalGain += getGainLoss(asset);\r\n      totalBasis += getCostBasis(asset);\r\n      data.push({\r\n        name: asset.stock.name,\r\n        symbol: asset.stock.symbol,\r\n        // lastPrice: formatCurrency(\r\n        //   asset.stock.price.bid || asset.stock.price.previousClose\r\n        // ),\r\n        bid: formatCurrency(\r\n          asset.stock.price.bid || asset.stock.price.previousClose\r\n        ),\r\n        ask: formatCurrency(\r\n          asset.stock.price.ask || asset.stock.price.previousClose\r\n        ),\r\n        quantity: getQuantity(asset).toString(),\r\n        costBasis: formatCurrency(getCostBasis(asset)),\r\n        currentValue: formatCurrency(getAssetValue(asset)),\r\n        percentOfAccount: formatPercent(getPercentOfAccount(user, asset)),\r\n        gain: formatCurrency(getGainLoss(asset)),\r\n        gainPercent: formatPercent(getGainLoss(asset) / getCostBasis(asset)),\r\n      });\r\n    }\r\n    //@ts-ignore\r\n    data.push({\r\n      name: \"Cash\",\r\n      currentValue: formatCurrency(user.info.cash),\r\n      costBasis: formatCurrency(user.info.cash),\r\n      percentOfAccount: formatPercent(user.info.cash / getAccountValue(user)),\r\n    });\r\n\r\n    return data;\r\n  };\r\n\r\n  const columns: object[] = [\r\n    { title: \"Symbol\", dataIndex: \"symbol\", key: \"symbol\" },\r\n    { title: \"Asset\", dataIndex: \"name\", key: \"name\" },\r\n    { title: \"Quantity\", dataIndex: \"quantity\", key: \"quantity\" },\r\n    { title: \"Bid\", dataIndex: \"bid\", key: \"bid\" },\r\n    { title: \"Ask\", dataIndex: \"ask\", key: \"ask\" },\r\n    {\r\n      title: \"Current Value\",\r\n      dataIndex: \"currentValue\",\r\n      key: \"currentValue\",\r\n    },\r\n    { title: \"Cost Basis\", dataIndex: \"costBasis\", key: \"costBasis\" },\r\n\r\n    {\r\n      title: \"Percentage of Account\",\r\n      dataIndex: \"percentOfAccount\",\r\n      key: \"percentOfAccount\",\r\n    },\r\n    {\r\n      title: \"Total Gain/Loss\",\r\n      dataIndex: \"gain\",\r\n      key: \"gain\",\r\n      onCell: (record: any) => ({\r\n        style: {\r\n          color: (parseCash(record.gain) < 0) ? \"red\": \"black\",\r\n        }\r\n      })\r\n    },\r\n    {\r\n      title: \"Total Gain/Loss %\",\r\n      dataIndex: \"gainPercent\",\r\n      key: \"gainPercent\",\r\n      onCell: (record: any) => ({\r\n        style: {\r\n          color: (parsePercent(record.gainPercent) < 0) ? \"red\": \"black\",\r\n        }\r\n      })\r\n    },\r\n  ];\r\n\r\n  const tablePaginationConfig: TablePaginationConfig = {\r\n    pageSize: 100,\r\n  };\r\n\r\n  return (\r\n    <div className=\"Positions\">\r\n      <header className=\"Overview-header\">\r\n        {data === undefined ? (\r\n          <div>\r\n            <Spin size=\"default\" />\r\n          </div>\r\n        ) : (\r\n          <Table\r\n            dataSource={data}\r\n            columns={columns}\r\n            pagination={tablePaginationConfig}\r\n          />\r\n        )}\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Positions;\r\n","import { Divider, Form, Select } from \"antd\";\r\nimport { useState } from \"react\";\r\nimport Buy from \"../components/Buy\";\r\nimport Sell from \"../components/Sell\";\r\n\r\nenum TradeType {\r\n  BUY = \"BUY\",\r\n  SELL = \"SELL\",\r\n}\r\n\r\nfunction Trade() {\r\n  const [tradeType, setTradeType] = useState(TradeType.BUY);\r\n\r\n  const handleTradeType = (value: TradeType) => {\r\n    setTradeType(value)\r\n  };\r\n\r\n  const formItemLayout = {\r\n    labelCol: {\r\n      span: 2,\r\n      offset: 0\r\n    },\r\n    wrapperCol: {\r\n      span: 2,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <br />\r\n      <Form name=\"trade\" {...formItemLayout}>\r\n        <Form.Item label=\"Trade Type\" labelAlign=\"left\">\r\n          <Select onChange={handleTradeType} defaultValue={TradeType.BUY} >\r\n            <Select.Option value={TradeType.BUY}>{TradeType.BUY}</Select.Option>\r\n            <Select.Option value={TradeType.SELL}>{TradeType.SELL}</Select.Option>\r\n          </Select>\r\n        </Form.Item>\r\n      </Form>\r\n      <Divider orientation=\"left\" orientationMargin=\"0\">\r\n      {tradeType == TradeType.BUY? \"Buy Stock\" : \"Sell Stock\"}\r\n    </Divider>\r\n      {tradeType == TradeType.BUY ? <Buy /> : <Sell />}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Trade;\r\n","import { Button, Form, Input, Spin } from \"antd\";\r\nimport { ChangeEvent, useEffect, useState, useRef } from \"react\";\r\nimport {\r\n  buyAsset,\r\n  BuyAssetResponse,\r\n  getCash,\r\n  getStockPrice,\r\n  lookupTicker,\r\n} from \"../APIService\";\r\nimport { formatCurrency } from \"../Calculations\";\r\nimport { COMMISSION } from \"../types\";\r\n\r\nconst PLEASE_ENTER_VALID_STOCK: string =\r\n  \"Please enter a valid stock ticker symbol\";\r\n\r\nexport default function Buy() {\r\n  const [typedSymbol, setTypedSymbol] = useState(\"\");\r\n  const [sharesToBuy, setSharesToBuy] = useState<number>(0);\r\n  const [askPrice, setAskPrice] = useState<number | null>(0);\r\n  const [totalCost, setTotalCost] = useState<number>(0);\r\n  const [shareCost, setShareCost] = useState<number>(0);\r\n  const [companyName, setCompanyName] = useState<string | null>(null);\r\n  const [cash, setCash] = useState<number>(0);\r\n  //const [loading, setLoading] = useState<boolean>(false);\r\n\r\n  const currentTypedSymbol = useRef<string>(\"\");\r\n  const [loadingStock, setLoadingStock] = useState<boolean>(false);\r\n  const [loadingPrice, setLoadingPrice] = useState<boolean>(false);\r\n\r\n  const handleTickerSymbol = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTypedSymbol(e.target.value.toUpperCase());\r\n  };\r\n\r\n  const handleSharesToBuy = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const typedValue: string = e.target.value;\r\n    const shares: number = Number.parseInt(typedValue);\r\n    if (shares) setSharesToBuy(shares);\r\n    else setSharesToBuy(0);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCash().then((userCash: number) => {\r\n      setCash(userCash);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setLoadingStock(true);\r\n    currentTypedSymbol.current = typedSymbol;\r\n    lookupTicker(typedSymbol)\r\n      .then((foundCompanyName: string | null) => {\r\n        if (typedSymbol === currentTypedSymbol.current) {\r\n          setLoadingStock(false);\r\n          setCompanyName(foundCompanyName);\r\n          if (foundCompanyName) {\r\n            setLoadingPrice(true);\r\n            getStockPrice(typedSymbol)\r\n              .then((foundPrice) => {\r\n                setLoadingPrice(false);\r\n                setAskPrice(foundPrice.ask);\r\n              })\r\n              .catch((ex: Error) => {\r\n                setLoadingPrice(false);\r\n              });\r\n          } else {\r\n            setAskPrice(null);\r\n          }\r\n          setLoadingStock(false);\r\n        }\r\n      })\r\n      .catch((ex: Error) => {\r\n        setLoadingStock(false);\r\n      });\r\n  }, [typedSymbol]);\r\n\r\n  useEffect(() => {\r\n    if (companyName != null && askPrice != null) {\r\n      const shareOnlyCost: number = sharesToBuy * askPrice;\r\n      setShareCost(shareOnlyCost);\r\n      setTotalCost(\r\n        shareOnlyCost > 0 ? shareOnlyCost + COMMISSION : shareOnlyCost\r\n      );\r\n    } else {\r\n      setShareCost(0);\r\n      setTotalCost(0);\r\n    }\r\n  }, [companyName, askPrice, sharesToBuy]);\r\n\r\n  const getForegroundColor = (): string => {\r\n    return !companyName ? \"red\" : \"black\";\r\n  };\r\n\r\n  const getCompanyText = (): string => {\r\n    const text: string = !companyName ? PLEASE_ENTER_VALID_STOCK : companyName;\r\n    //console.log(\"returning company text = \", {text});\r\n    return text;\r\n  };\r\n\r\n  const handlePurchase = async () => {\r\n    if (cash < totalCost) {\r\n      window.alert(\"You don't have enough cash for  that purchase \");\r\n      return;\r\n    }\r\n    if (companyName) {\r\n      const msg: string =\r\n        \"Please confirm purchase of \" +\r\n        sharesToBuy +\r\n        \" shares of \" +\r\n        companyName +\r\n        \" for a total of \" +\r\n        formatCurrency(totalCost) +\r\n        \".\";\r\n      const isOK: boolean = window.confirm(msg);\r\n      if (isOK) {\r\n        buyAsset(typedSymbol, sharesToBuy, askPrice || 0).then(\r\n          (buyAssetResponse: BuyAssetResponse) => {\r\n            const { successful, remainingCash } = buyAssetResponse;\r\n            if (successful) {\r\n              window.alert(\r\n                \"Purchase successful. New cash balance is \" +\r\n                  formatCurrency(remainingCash)\r\n              );\r\n              window.location.assign(\"/transactions\");\r\n              // console.log(\"showing historical prices *****************************************************\")\r\n            }\r\n          },\r\n          () => {\r\n            window.alert(\r\n              \"Purchase was not executed due to critical server error\"\r\n            );\r\n          }\r\n        );\r\n      }\r\n    } else {\r\n      window.alert(\"Purchase cancelled\");\r\n    }\r\n  };\r\n  const formItemLayout = {\r\n    labelCol: {\r\n      span: 2,\r\n      offset: 0,\r\n    },\r\n    wrapperCol: {\r\n      span: 6,\r\n      offset: 1,\r\n    },\r\n  };\r\n\r\n  const tailLayout = {\r\n    wrapperCol: {\r\n      offset: 3,\r\n      span: 16,\r\n    },\r\n  };\r\n  return (\r\n    <Form name=\"buy\" {...formItemLayout}>\r\n      <Form.Item label=\"Stock\">\r\n        <Input \r\n          value={typedSymbol} \r\n          placeholder=\"Enter stock ticker symbol\"\r\n          onChange={handleTickerSymbol}\r\n        ></Input>\r\n        <>\r\n          {loadingStock ? (\r\n            <Spin size=\"small\" />\r\n          ) : (\r\n            <label\r\n              style={\r\n                !!typedSymbol && !!companyName\r\n                  ? { color: undefined }\r\n                  : { color: \"red\" }\r\n              }\r\n            >\r\n              {!typedSymbol\r\n                ? \"\"\r\n                : companyName\r\n                ? companyName\r\n                : \"Invalid ticker symbol\"}\r\n            </label>\r\n          )}{\" \"}\r\n        </>\r\n      </Form.Item>\r\n\r\n      <Form.Item label=\"Current Ask Price\">\r\n        {loadingPrice || loadingStock ? (\r\n          <Spin size=\"small\" />\r\n        ) : (\r\n          <label>{askPrice ? formatCurrency(askPrice) : \"Please enter a valid ticker symbol\"}</label>\r\n        )}\r\n      </Form.Item>\r\n\r\n      <Form.Item label=\"Shares to Buy\">\r\n        <Input\r\n          placeholder={\"Enter number of shares to buy\"}\r\n          onChange={handleSharesToBuy}\r\n          value={sharesToBuy === 0 ? undefined : sharesToBuy}\r\n        ></Input>\r\n      </Form.Item>\r\n\r\n      <Form.Item label=\"Commission\">\r\n        <label>{formatCurrency(COMMISSION)}</label>\r\n      </Form.Item>\r\n\r\n      <Form.Item label=\"Total Cost\">\r\n        {sharesToBuy > 0 && (loadingStock || loadingPrice) ? (\r\n          <Spin size=\"small\" />\r\n        ) : (\r\n          <label\r\n            style={totalCost > cash ? { color: \"red\" } : { color: undefined }}\r\n          >\r\n            {sharesToBuy > 0\r\n              ? formatCurrency(totalCost)\r\n              : \"Please enter the number of shares to buy\"}\r\n          </label>\r\n        )}\r\n      </Form.Item>\r\n\r\n      <Form.Item {...tailLayout}>\r\n        <Button\r\n          type=\"primary\"\r\n          onClick={handlePurchase}\r\n          disabled={\r\n            sharesToBuy === 0 ||\r\n            loadingPrice ||\r\n            loadingStock ||\r\n            !companyName ||\r\n            totalCost > cash\r\n          }\r\n        >\r\n          Submit\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n}\r\n","import { Button, Empty, Form, Input, Select, Spin } from \"antd\";\r\nimport { ChangeEvent, useEffect, useState } from \"react\";\r\nimport {\r\n  getAssets,\r\n  getShareCount,\r\n  getStockPrice,\r\n  sellAsset,\r\n} from \"../APIService\";\r\nimport { formatCurrency } from \"../Calculations\";\r\nimport { Asset, COMMISSION, SpotPrice } from \"../types\";\r\n\r\nexport default function Sell() {\r\n  const [assets, setAssets] = useState<Asset[] | undefined>(undefined);\r\n  const [loadingAssets, setLoadingAssets] = useState<boolean>(false);\r\n  const [asset, setAsset] = useState<Asset | undefined>(undefined);\r\n  const [sharesToSell, setSharesToSell] = useState(0);\r\n  const [price, setPrice] = useState<SpotPrice>({\r\n    bid: 0,\r\n    ask: 0,\r\n    previousClose: 0,\r\n  });\r\n\r\n  const [loadingPrice, setLoadingPrice] = useState<boolean>(false);\r\n\r\n  const handleAssetChange = (value: string) => {\r\n    if (assets && value) {\r\n      const foundAsset: Asset | undefined = assets.find(\r\n        (currAsset) =>\r\n          currAsset.stock.symbol.toUpperCase() === value.toUpperCase()\r\n      );\r\n      if (foundAsset) {\r\n        setAsset(foundAsset);\r\n        setSharesToSell(0);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleSharesToSell = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const typedValue: string = e.target.value;\r\n    const shares: number = Number.parseInt(typedValue);\r\n    if (shares) setSharesToSell(shares);\r\n    else setSharesToSell(0);\r\n  };\r\n\r\n  const handleSale = async () => {\r\n    if (sharesToSell > getShareCount(asset)) {\r\n      window.alert(\"Insufficient shares for this sale\");\r\n      return;\r\n    }\r\n\r\n    if (asset) {\r\n      const totalCost: number = price.bid * sharesToSell - COMMISSION;\r\n      const msg: string =\r\n        \"Please confirm sale of \" +\r\n        sharesToSell +\r\n        \" shares of \" +\r\n        asset.stock.name +\r\n        \" for a total of \" +\r\n        formatCurrency(totalCost) +\r\n        \".\";\r\n      const isOK: boolean = window.confirm(msg);\r\n\r\n      if (isOK) {\r\n        const response = await sellAsset(\r\n          asset.stock.symbol,\r\n          sharesToSell,\r\n          price.bid || 0\r\n        );\r\n        if (response) {\r\n          window.alert(\r\n            \"Sale confirmed. New cash balance is \" +\r\n              formatCurrency(response.remainingCash)\r\n          );\r\n          window.location.assign(\"/\");\r\n        } else {\r\n          window.alert(\"Sale failed: \" + response);\r\n        }\r\n      } else alert(\"Sale cancelled\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoadingAssets(true);\r\n    getAssets().then((foundAssets) => {\r\n      setAssets(foundAssets);\r\n      setLoadingAssets(false);\r\n      if (foundAssets && foundAssets.length > 0) setAsset(foundAssets[0]);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (asset) {\r\n      setLoadingPrice(true);\r\n      setSharesToSell(0);\r\n\r\n      getStockPrice(asset.stock.symbol).then((foundPrice) => {\r\n        setPrice(foundPrice);\r\n        setLoadingPrice(false);\r\n      });\r\n    }\r\n  }, [asset]);\r\n\r\n  const formItemLayout = {\r\n    labelCol: {\r\n      span: 2,\r\n      offset: 0,\r\n    },\r\n    wrapperCol: {\r\n      span: 6,\r\n      offset: 1,\r\n    },\r\n  };\r\n  const tailLayout = {\r\n    wrapperCol: {\r\n      offset: 3,\r\n      span: 16,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {loadingAssets ? (\r\n        <Spin size=\"large\" />\r\n      ) : !assets || assets.length == 0 ? (\r\n        <Empty description=\"You do not have any stocks to sell\"></Empty>\r\n      ) : (\r\n        <Form name=\"sell\" {...formItemLayout}>\r\n          <Form.Item label=\"Stock\">\r\n            <Select\r\n              onChange={handleAssetChange}\r\n              defaultValue={assets[0].stock.symbol}\r\n              value={asset?.stock.symbol}\r\n            >\r\n              {assets.map((currAsset) => {\r\n                return (\r\n                  <Select.Option value={currAsset.stock.symbol}>\r\n                    {currAsset.stock.name +\r\n                      \"  (\" +\r\n                      currAsset.stock.symbol +\r\n                      \")\"}\r\n                  </Select.Option>\r\n                );\r\n              })}\r\n            </Select>\r\n          </Form.Item>\r\n\r\n          <Form.Item label=\"Current Bid Price\">\r\n            {loadingPrice ? (\r\n              <Spin size=\"small\" />\r\n            ) : (\r\n              <label> {formatCurrency(price.bid)}</label>\r\n            )}\r\n          </Form.Item>\r\n\r\n          <Form.Item label=\"Shares to Sell\">\r\n            <Input\r\n              placeholder={\r\n                asset\r\n                  ? \"\" +\r\n                    getShareCount(asset) +\r\n                    \" shares of \" +\r\n                    asset.stock.symbol +\r\n                    \" available to sell\"\r\n                  : \"Enter number of shares to sell\"\r\n              }\r\n              onChange={handleSharesToSell}\r\n              value={sharesToSell == 0 ? undefined : sharesToSell}\r\n              style={\r\n                sharesToSell > getShareCount(asset)\r\n                  ? { color: \"red\" }\r\n                  : { color: undefined }\r\n              }\r\n            ></Input>\r\n          </Form.Item>\r\n\r\n          <Form.Item label=\"Commission\">\r\n            <label>{formatCurrency(COMMISSION)}</label>\r\n          </Form.Item>\r\n\r\n          <Form.Item label=\"Net Proceeds\">\r\n            {loadingPrice && sharesToSell > 0 ? (\r\n              <Spin size=\"small\" />\r\n            ) : (\r\n              <label>\r\n                {sharesToSell > getShareCount(asset)\r\n                  ? \"You may sell a maximum of \" +\r\n                    getShareCount(asset) +\r\n                    \" shares of \" +\r\n                    asset?.stock.symbol\r\n                  : sharesToSell == 0\r\n                  ? \"Please enter the number of shares to sell\"\r\n                  : sharesToSell > 0\r\n                  ? formatCurrency(price.bid * sharesToSell - COMMISSION)\r\n                  : 0}\r\n              </label>\r\n            )}\r\n          </Form.Item>\r\n\r\n          <Form.Item {...tailLayout}>\r\n            <Button\r\n              type=\"primary\"\r\n              onClick={handleSale}\r\n              disabled={\r\n                !asset ||\r\n                !price ||\r\n                sharesToSell <= 0 ||\r\n                sharesToSell > getShareCount(asset)\r\n              }\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { getTransactions } from \"../APIService\";\r\nimport { Transaction, TransactionType, Account } from \"../types\";\r\nimport { Spin, Table, TablePaginationConfig } from \"antd\";\r\nimport { calcSharePrice, formatCurrency, formatDate } from \"../Calculations\";\r\n\r\ntype TransactionRow = {\r\n  date: string;\r\n  description: string;\r\n  amount: string;\r\n  cash: string;\r\n};\r\n\r\nfunction Transactions() {\r\n  const [data, setData] = useState<TransactionRow[] | undefined>();\r\n\r\n  useEffect(() => {\r\n    getTransactions().then((transactions) => {\r\n      setData(calcData(transactions));\r\n    });\r\n  }, []);\r\n\r\n  const calcData = (transactions: Transaction[]): TransactionRow[] => {\r\n    const rows: TransactionRow[] = [];\r\n    for (var transaction of transactions) {\r\n      rows.push({\r\n        date: formatDate(transaction.date, true),\r\n        description: createDescription(transaction),\r\n        amount: transaction.amount? formatCurrency(transaction.amount) : formatCurrency(0),\r\n        cash: formatCurrency(transaction.cash),\r\n      });\r\n    }\r\n    return rows;\r\n  };\r\n\r\n  const createDescription = (transaction: Transaction) => {\r\n    var description: string = \"\";\r\n\r\n    switch (transaction.type) {\r\n      case TransactionType.BUY:\r\n        description =\r\n          \"Buy \" +\r\n          transaction.shares +\r\n          \" of \" +\r\n          transaction.name +\r\n          \" (\" +\r\n          transaction.symbol +\r\n          \") at \" +\r\n          formatCurrency(calcSharePrice(transaction))\r\n        break;\r\n\r\n      case TransactionType.DIVIDEND:\r\n        description =\r\n          \"Dividend on \" +\r\n          transaction.shares +\r\n          \" shares of \" +\r\n          transaction.name +\r\n          \" (\" +\r\n          transaction.symbol +\r\n          \")\";\r\n        break;\r\n\r\n      case TransactionType.GIFT:\r\n        description = \"Initial Deposit\";\r\n        break;\r\n      case TransactionType.SELL:\r\n        description =\r\n          \"Sell \" +\r\n          transaction.shares +\r\n          \" of \" +\r\n          transaction.name +\r\n          \" (\" +\r\n          transaction.symbol +\r\n          \") at \" +\r\n          formatCurrency(calcSharePrice(transaction))\r\n        break;\r\n      case TransactionType.SPLIT:\r\n        description = transaction.symbol + \" \" + transaction.to + \"-for-\" + transaction.from + \" Stock Split\"\r\n        break;\r\n      default:\r\n        console.log(\"This is transaction type: \" + transaction.type);\r\n        description = \"There is no describing this transaction\";\r\n        break;\r\n    }\r\n\r\n    //console.log(\"Description for \", transaction, \" -> \", description);\r\n    return description;\r\n  };\r\n\r\n  const columns: object[] = [\r\n    { title: \"Date\", dataIndex: \"date\", key: \"date\" },\r\n    { title: \"Description\", dataIndex: \"description\", key: \"description\" },\r\n    { title: \"Amount\", dataIndex: \"amount\", key: \"amount\" },\r\n    { title: \"Cash Balance\", dataIndex: \"cash\", key: \"cash\" },\r\n  ];\r\n\r\n  const tablePaginationConfig:TablePaginationConfig = {\r\n    pageSize : 100\r\n  }\r\n\r\n  return (\r\n    <div className=\"Transactions\">\r\n      <header className=\"Transactions-header\"></header>\r\n      {data === undefined ? (\r\n        <Spin size = \"default\" />\r\n      ) : (\r\n        <Table \r\n        dataSource={data} \r\n        columns={columns} \r\n        pagination={tablePaginationConfig}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Transactions;\r\n","import { Button, Tabs } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport { doLogout } from \"../APIService\";\r\nimport Analysis from \"./Analysis\";\r\nimport Overview from \"./Overview\";\r\nimport Positions from \"./Positions\";\r\nimport Trade from \"./Trade\";\r\nimport Transactions from \"./Transactions\";\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nconst handleLogout = () => {\r\n  const isOK: boolean = window.confirm(\"OK to Log Out?\");\r\n  if (!isOK) return;\r\n  doLogout();\r\n  window.location.assign(\"/login\");\r\n};\r\nconst logoutButton = (\r\n  <Button type=\"primary\" onClick={handleLogout}>\r\n    Logout\r\n  </Button>\r\n);\r\n\r\nconst style = {\r\n  \r\n}\r\n\r\nfunction NavPane() {\r\n  return (\r\n    <Tabs style={{\r\n    paddingTop: '5px',\r\n    paddingLeft: '10px',\r\n    paddingRight: '5px',\r\n    boxSizing: 'content-box',\r\n  }} tabBarExtraContent={logoutButton}\r\n  tabPosition='top'\r\n  type='card'\r\n  >\r\n      <TabPane tab=\"Overview\" key=\"1\">\r\n        <Overview />\r\n      </TabPane>\r\n      <TabPane tab=\"Positions\" key=\"2\">\r\n        <Positions />\r\n      </TabPane>\r\n      <TabPane tab=\"Transactions\" key=\"3\">\r\n        <Transactions />\r\n      </TabPane>\r\n      <TabPane tab=\"Analysis\" key=\"4\">\r\n        <Analysis />\r\n      </TabPane>\r\n      <TabPane tab=\"Trade\" key=\"5\">\r\n        <Trade />\r\n      </TabPane>\r\n    </Tabs>\r\n  );\r\n}\r\n\r\nexport default NavPane;\r\n","\r\nimport { Button, Form, Input } from \"antd\";\r\nimport { doSignup } from \"../APIService\";\r\n\r\nfunction SignUp() {\r\n  const handleSignUpButtonClick = (values: any) => {\r\n    doSignup(values.userID, values.password, values.name).then(\r\n      (success: boolean) => {\r\n        if (success) {\r\n          window.location.assign(\"/login\");\r\n          window.alert(\r\n            \"Welcome, \" +\r\n              values.name +\r\n              \". Your account was successfully created.\"\r\n          );\r\n        } else {\r\n          window.alert(\"Error creating account\");\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  const formItemLayout = {\r\n    labelCol: {\r\n      span: 2,\r\n      offset: 0,\r\n    },\r\n    wrapperCol: {\r\n      span: 10,\r\n      offset: 1,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <Form name=\"signup\" {...formItemLayout} onFinish={handleSignUpButtonClick}>\r\n      <Form.Item\r\n        label=\"Name\"\r\n        name=\"name\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: \"Please input your name\",\r\n          },\r\n        ]}\r\n      >\r\n        <Input placeholder=\"Fred Smith\" />\r\n      </Form.Item>\r\n      <Form.Item\r\n        label=\"User ID\"\r\n        name=\"userID\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: \"Please input your user ID\",\r\n          },\r\n        ]}\r\n      >\r\n        <Input placeholder=\"stock-market-whiz\" />\r\n      </Form.Item>\r\n\r\n      <Form.Item\r\n        label=\"Password\"\r\n        name=\"password\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: \"Please input your password\",\r\n          },\r\n        ]}\r\n      >\r\n        <Input.Password autoComplete=\"new-password\" />\r\n      </Form.Item>\r\n      <Form.Item\r\n        wrapperCol={{\r\n          offset: 8,\r\n          span: 3,\r\n        }}\r\n      >\r\n        <Button type=\"primary\" htmlType=\"submit\">\r\n          Sign Up\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default SignUp;\r\n","import Login from \"./scenes/Login\";\r\nimport Header from \"./components/Header\";\r\n\r\nimport {isLoggedIn } from \"./APIService\";\r\nimport NavPane from \"./scenes/NavPane\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport SignUp from \"./scenes/SignUp\";\r\nimport { Helmet as ReactHelmet } from \"react-helmet\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n     \r\n    <Router>\r\n      <div>\r\n      <ReactHelmet >\r\n      <title>Investment Simulator</title>\r\n        </ReactHelmet>\r\n        <Header />\r\n        <br/>\r\n        <Switch>\r\n          <Route path=\"/signup\">\r\n            <SignUp />\r\n          </Route>\r\n          <Route path=\"/login\">\r\n            {!isLoggedIn() ? (\r\n              <Login/>\r\n            ) : (\r\n              <NavPane />\r\n            )}\r\n          </Route>\r\n      \r\n          <Route path=\"/\">\r\n            {!isLoggedIn() ? (\r\n              <Login/>\r\n            ) : (\r\n              <NavPane />\r\n            )}\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n    </div>\r\n  );\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}